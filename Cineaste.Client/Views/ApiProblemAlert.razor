@inherits CineasteComponent

<div>
    <FluentCard Class="@($"alert {this.Class}")">
        <div class="summary-container">
            <p class="main-text">@this.Loc[this.Text]</p>

            <div class="button-panel">
                @if (this.Problem is not null && this.Problem.Detail is not null)
                {
                    <FluentButton Appearance="Appearance.Outline" @onclick="this.ToggleOpened">
                        <slot part="content">@this.Loc[this.IsOpened ? "ApiProblemAlert.HideDetails" : "ApiProblemAlert.ShowDetails"]</slot>
                    </FluentButton>
                }

                @if (this.ShowButton)
                {
                    <FluentButton @onclick="this.TryAgain" Appearance="Appearance.Outline">
                        @this.Loc[this.ButtonText]
                    </FluentButton>
                }
            </div>
        </div>

        @if (this.Problem is not null && this.Problem.Detail is not null && this.IsOpened)
        {
            <FluentDivider Role="DividerRole.Separator"></FluentDivider>
            <p class="details-container">
                <span class="details">@this.Loc[this.Problem.Detail]</span>
                (<a class="alert-link" href="@this.Problem.Type" target="_blank">
                    @this.Problem.Status @this.Problem.Title
                </a>)
            </p>
        }
    </FluentCard>
</div>

@code {
    [Parameter]
    public ProblemDetails? Problem { get; set; }

    [Parameter]
    public string Text { get; set; } = String.Empty;

    [Parameter]
    public string ButtonText { get; set; } = "ApiProblemAlert.TryAgain";

    [Parameter]
    public bool ShowButton { get; set; } = true;

    [Parameter]
    public EventCallback TryAgain { get; set; }

    [Parameter]
    public string Class { get; set; } = String.Empty;

    private bool IsOpened { get; set; }

    private void ToggleOpened() =>
        this.IsOpened = !this.IsOpened;
}
