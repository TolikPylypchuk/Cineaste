@inherits StatefulComponent<SeriesFormState>

<CascadingValue Value="@(() => this.FormModel.ToRequest())" IsFixed="true">
    <div class="d-flex flex-column h-100">
        <div class="d-flex flex-row justify-content-between">
            <RadzenButton Icon="keyboard_arrow_up" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"
                          Click="this.GoToSeries" class="btn-transparent my-2" />

            <div class="d-flex flex-row">
                <RadzenButton Icon="keyboard_arrow_left" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"
                              class="@($"btn-transparent{(this.FormModel.IsFirst ? " invisible" : "")} my-2 me-1")"
                              Click="this.OnGoToPreviousComponent" />
                <RadzenButton Icon="keyboard_arrow_right" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"
                              class="@($"btn-transparent{(this.FormModel.IsLast ? " invisible" : "")} my-2 ms-1")"
                              Click="this.OnGoToNextComponent" />
            </div>

            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" Click="this.Close"
                          class="btn-transparent my-2" />
        </div>

        <h1 class="form-title">
            @this.FormTitle
        </h1>

        <div class="w-100 h-100 d-flex flex-column justify-content-between overflow-y-auto overflow-x-hidden">
            <div class="h-100 overflow-y-auto overflow-x-hidden">
                <div class="d-flex flex-column align-items-center mt-2">
                    @{
                        int part = 1;
                        bool multiple = this.FormModel.Periods
                            .Count(period => !String.IsNullOrWhiteSpace(period.RottenTomatoesId)) > 1;
                    }

                    @foreach (var period in this.FormModel.Periods
                        .Where(p => !String.IsNullOrWhiteSpace(p.RottenTomatoesId)))
                    {
                        <RadzenLink Path="@String.Format(
                                        this.Loc["Link.RottenTomatoesUrlFormat"], period.RottenTomatoesId)"
                                    Text="@this.RottenTomatoesLinkText(part, multiple)" target="_blank" />
                        part++;
                    }
                </div>

                <RadzenLabel Text="@this.Loc["SeasonForm.Titles"]" class="mt-2" />
                <TitlesForm Titles="@this.FormModel.Titles" Validator="@this.TitlesValidator"
                            FirstTitleChanged="@this.UpdateFormTitle" Parent="@this"
                            ConvertTitlesToRequests="@this.FormModel.ToTitleRequests" />

                <RadzenLabel Text="@this.Loc["SeasonForm.OriginalTitles"]" class="mt-2" />
                <TitlesForm Titles="@this.FormModel.OriginalTitles" Validator="@this.OriginalTitlesValidator"
                            ConvertTitlesToRequests="@this.FormModel.ToTitleRequests" Parent="@this" />

                <div class="row mt-2">
                    <div class="col-md pe-md-1">
                        <RadzenLabel Text="@this.Loc["SeasonForm.WatchStatus"]" Component="WatchStatusDropDown" />
                        <RadzenDropDown @bind-Value="@this.FormModel.WatchStatus" Data="@this.AllWatchStatuses"
                                        AllowVirtualization="false" AllowClear="false" AllowFiltering="false"
                                        Name="WatchStatusDropDown">
                            <Template>
                                @this.Loc[$"SeasonForm.WatchStatus.{context}"]
                            </Template>
                        </RadzenDropDown>
                        <FormValidator Validator="@this.WatchStatusValidator" Value="@this.FormModel.WatchStatus"
                                       Trigger="@this.FormModel.ReleaseStatus" />
                    </div>

                    <div class="col-md ps-md-1">
                        <RadzenLabel Text="@this.Loc["SeasonForm.ReleaseStatus"]" Component="ReleaseStatusDropDown" />
                        <RadzenDropDown @bind-Value="@this.FormModel.ReleaseStatus" Data="@this.AllReleaseStatuses"
                                        AllowVirtualization="false" AllowClear="false" AllowFiltering="false"
                                        Name="ReleaseStatusDropDown">
                            <Template>
                                @this.Loc[$"SeasonForm.ReleaseStatus.{context}"]
                            </Template>
                        </RadzenDropDown>
                    </div>
                </div>

                <RadzenLabel Text="@this.Loc["SeasonForm.Channel"]" Component="ChannelTextBox" class="mt-1" />
                <RadzenTextBox @bind-Value="@this.FormModel.Channel" Name="ChannelTextBox" class="w-100" />
                <FormValidator Validator="@this.ChannelValidator" Value="@this.FormModel.Channel" />

                @foreach (var period in this.FormModel.Periods)
                {
                    <PeriodForm FormModel="@period" CanRemove="@(this.FormModel.Periods.Count > 1)"
                                Removed="@(() => this.OnPeriodRemoved(period))" Parent="@this"
                                RottenTomatoesIdChanged="@this.StateHasChanged" />
                }

                <div>
                    <FormValidator Validator="@this.PeriodsValidator" Value="@this.FormModel.ToRequest().Periods" />
                </div>

                <div class="d-flex justify-content-center">
                    <div class="mt-2" style="display: inline-grid; grid-template-columns: 1fr 1fr">
                        <RadzenButton Text="@this.Loc["SeasonForm.AddTitle"]" ButtonStyle="ButtonStyle.Secondary"
                                      Click="@(e => this.AddTitle(this.FormModel.Titles))"
                                      class="d-inline-block me-1" />
                        <RadzenButton Text="@this.Loc["SeasonForm.AddOriginalTitle"]"
                                      ButtonStyle="ButtonStyle.Secondary" class="d-inline-block ms-1"
                                      Click="@(e => this.AddTitle(this.FormModel.OriginalTitles))" />
                    </div>
                </div>

                <div class="d-flex justify-content-center mt-2">
                    <RadzenButton Text="@this.Loc["SeasonForm.AddPeriod"]" ButtonStyle="ButtonStyle.Secondary"
                                  Click="@(e => this.AddPeriod())" class="" />
                </div>

                <div class="d-flex justify-content-center my-4">
                    <RadzenButton Text="@this.Loc["Button.Delete"]" ButtonStyle="ButtonStyle.Danger"
                                  Click="@this.Delete" />
                </div>
            </div>

            <div class="d-flex flex-row my-2">
                <RadzenButton Text="@this.Loc["SeasonForm.GoToSeries"]" ButtonStyle="ButtonStyle.Primary"
                              Click="@this.GoToSeries" class="me-1" />
                <RadzenButton Text="@this.Loc["Button.Cancel"]" ButtonStyle="ButtonStyle.Secondary"
                              Click="@this.Cancel" class="ms-1" />
            </div>
        </div>
    </div>
</CascadingValue>
