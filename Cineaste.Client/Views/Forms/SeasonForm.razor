@inherits CineasteForm<SeasonFormModel, SeasonRequest, SeasonModel, SeriesFormState>

<FormParamsProvider For="this">
    <div class="container list-sidebar">
        <div class="form-header">
            <FluentButton Appearance="Appearance.Lightweight" @onclick="this.GoToSeries">
                <FluentIcon Name="@FluentIcons.ChevronUp" Color="Color.Neutral" />
            </FluentButton>

            <div class="go-to-other-components-container">
                <FluentButton Appearance="Appearance.Lightweight" @onclick="this.OnGoToPreviousComponent"
                              Class="@(this.FormModel.IsFirst ? "invisible" : null)"
                              aria-hidden="@this.FormModel.IsFirst">
                    <FluentIcon Name="@FluentIcons.ChevronLeft" Color="Color.Neutral" />
                </FluentButton>

                <FluentButton Appearance="Appearance.Lightweight" @onclick="this.OnGoToNextComponent"
                              Class="@(this.FormModel.IsLast ? "invisible" : null)"
                              aria-hidden="@this.FormModel.IsLast">
                    <FluentIcon Name="@FluentIcons.ChevronRight" Color="Color.Neutral" />
                </FluentButton>
            </div>

            <FluentButton Appearance="Appearance.Lightweight" @onclick="this.Close">
                <FluentIcon Name="@FluentIcons.Dismiss" Color="Color.Neutral" />
            </FluentButton>
        </div>

        <div class="form-container list-sidebar">
            <h2 class="form-title">
                @this.FormTitle
            </h2>

            <div class="form">
                <div class="form-links">
                    @{
                        int part = 1;

                        var periods = this.FormModel.Periods
                            .Where(p => !String.IsNullOrWhiteSpace(p.RottenTomatoesId))
                            .ToList();

                        bool multiple = periods.Count > 1;
                    }

                    @foreach (var period in periods)
                    {
                        string href = String.Format(this.Loc["Link.RottenTomatoesUrlFormat"], period.RottenTomatoesId);

                        <FluentAnchor Href="@href" Target="_blank" Appearance="Appearance.Hypertext">
                            @this.RottenTomatoesLinkText(part, multiple)
                        </FluentAnchor>

                        part++;
                    }
                </div>

                <TitlesForm Titles="@this.FormModel.Titles" Label="SeasonForm.Titles"
                            PropertyName="@nameof(this.FormModel.Titles)" />

                <TitlesForm Titles="@this.FormModel.OriginalTitles" Label="SeasonForm.OriginalTitles"
                            PropertyName="@nameof(this.FormModel.OriginalTitles)" />

                <div class="form-statuses">
                    <div>
                        <label class="label" for="watch-status">@this.Loc["SeasonForm.WatchStatus"]</label>
                        <FluentSelect Id="watch-status" Items="@this.AllWatchStatuses" Class="select form-field"
                                      @bind-SelectedOption="this.FormModel.WatchStatus"
                                      OptionText="@(s => this.Loc[$"SeasonForm.WatchStatus.{s}"])"
                                      Position="SelectPosition.Below" />
                        <ErrorPresenter ErrorCode="Season.WatchStatus.*" Trigger="@this.StatusErrorTrigger" />
                    </div>
                    <div>
                        <label class="label" for="release-status">@this.Loc["SeasonForm.ReleaseStatus"]</label>
                        <FluentSelect Id="release-status" Items="this.AllReleaseStatuses" Class="select form-field"
                                      @bind-SelectedOption="this.FormModel.ReleaseStatus"
                                      OptionText="@(s => this.Loc[$"SeasonForm.ReleaseStatus.{s}"])"
                                      Position="SelectPosition.Below" />
                    </div>
                </div>

                <div>
                    <FluentTextField @bind-Value="@this.FormModel.Channel" Class="form-field">
                        @this.Loc["SeasonForm.Channel"]
                    </FluentTextField>
                    <ErrorPresenter ErrorCode="Season.Channel.*" Trigger="@this.FormModel.Channel" />
                </div>

                @foreach (var period in this.FormModel.Periods)
                {
                    <PeriodForm FormModel="@period" CanRemove="@(this.FormModel.Periods.Count > 1)"
                                Removed="@(() => this.OnPeriodRemoved(period))" Changed="@this.OnPeriodChanged" />
                }

                <div>
                    <ErrorPresenter ErrorCode="Season.Periods.*" Trigger="@this.PeriodValidationTrigger" />
                </div>

                <div class="add-titles">
                    <FluentButton Appearance="Appearance.Neutral"
                                  @onclick="@(() => this.AddTitle(this.FormModel.Titles))">
                        @this.Loc["SeasonForm.AddTitle"]
                    </FluentButton>
                    <FluentButton Appearance="Appearance.Neutral"
                                  @onclick="@(() => this.AddTitle(this.FormModel.OriginalTitles))">
                        @this.Loc["SeasonForm.AddOriginalTitle"]
                    </FluentButton>
                </div>

                <div class="button-container">
                    <FluentButton Appearance="Appearance.Neutral" @onclick="@this.AddPeriod">
                        @this.Loc["SeasonForm.AddPeriod"]
                    </FluentButton>
                </div>

                <div class="button-container">
                    <FluentButton Appearance="Appearance.Neutral" @onclick="@this.Delete">
                        @this.Loc["Button.Delete"]
                    </FluentButton>
                </div>
            </div>

            <div class="form-actions">
                <FluentButton Appearance="Appearance.Accent" @onclick="@this.GoToSeries">
                    @this.Loc["SeasonForm.GoToSeries"]
                </FluentButton>

                @if (this.FormModel.HasChanges)
                {
                    <FluentButton Appearance="Appearance.Neutral" @onclick="@this.Cancel">
                        @this.Loc["Button.Cancel"]
                    </FluentButton>
                }
            </div>
        </div>
    </div>
</FormParamsProvider>
