@inherits CineasteForm<PeriodFormModel, PeriodRequest, PeriodModel, SeriesFormState>

<CascadingValue Name="@CascadingParameters.ErrorCodes" Value="@this.FormModel.ValidationErrors">
    <MonthYearPicker @bind-Month="this.FormModel.StartMonth" @bind-Year="this.FormModel.StartYear" Class="mt-2"
                        MonthText="@(
                        $"PeriodForm.{(!this.FormModel.IsSingleDayRelease ? "StartMonth" : "ReleaseMonth")}")"
                        YearText="@(
                        $"PeriodForm.{(!this.FormModel.IsSingleDayRelease ? "StartYear" : "ReleaseYear")}")"
                        Changed="@this.OnPeriodChanged" YearErrorCode="Period.StartYear.*" />

    @if (!this.FormModel.IsSingleDayRelease)
    {
        <MonthYearPicker @bind-Month="this.FormModel.EndMonth" @bind-Year="this.FormModel.EndYear" Class="mt-1"
                            MonthText="PeriodForm.EndMonth" YearText="PeriodForm.EndYear"
                            Changed="@this.OnPeriodChanged" YearErrorCode="Period.EndYear.*" />
    }

    <div>
        <ErrorPresenter ErrorCode="Period.Invalid" Trigger="@this.InvalidPeriodTrigger" />
    </div>

    <RadzenLabel Text="@this.Loc["PeriodForm.EpisodeCount"]" Component="EpisodeCountNumeric" class="mt-1" />

    <div class="row">
        <div class="col-md-6 pe-md-1">
            <RadzenNumeric @bind-Value="this.FormModel.EpisodeCount" Name="EpisodeCountNumeric" />
        </div>
        <div class="col-md-6 ps-md-1 d-flex align-items-center">
            <div>
                <RadzenCheckBox @bind-Value="@this.FormModel.IsSingleDayRelease" Name="IsSingleDayReleaseCheckBox"
                                Disabled="@(!this.CanChangeIsSingleDayRelease)" />
                <RadzenLabel Text="@this.Loc["PeriodForm.IsSingleDayRelease"]" Component="IsSingleDayReleaseCheckBox" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md pe-md-1">
            <ErrorPresenter ErrorCode="Period.EpisodeCount.*" Trigger="@this.FormModel.EpisodeCount" />
        </div>
        <div class="col-md ps-md-1 d-flex align-items-center">
            <ErrorPresenter ErrorCode="Period.IsSingleDayRelease.*"
                            Trigger="@(new { this.FormModel.IsSingleDayRelease, this.FormModel.EpisodeCount })" />
        </div>
    </div>

    <RadzenLabel Text="@this.Loc["PeriodForm.RottenTomatoesId"]" Component="RottenTomatoesTextBox" class="mt-2" />

    <div class="d-flex flex-row align-items-center w-100">
        <RadzenTextBox @bind-Value="@this.FormModel.RottenTomatoesId" Change="@this.Changed"
                        Name="RottenTomatoesTextBox" class="w-100" />

        @if (this.CanRemove)
        {
            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"
                            Click="@this.Removed" class="ms-2" />
        }
    </div>

    <div>
        <ErrorPresenter ErrorCode="Period.RottenTomatoesId.*" Trigger="@this.FormModel.RottenTomatoesId" />
    </div>
</CascadingValue>

@code {
    [Parameter]
    public override PeriodFormModel FormModel { get; set; } = null!;

    [Parameter]
    public bool CanRemove { get; set; }

    [Parameter]
    public EventCallback Changed { get; set; }

    [Parameter]
    public EventCallback Removed { get; set; }

    private bool CanChangeIsSingleDayRelease { get; set; }

    private object InvalidPeriodTrigger =>
        new
        {
            this.FormModel.StartMonth,
            this.FormModel.StartYear,
            this.FormModel.EndMonth,
            this.FormModel.EndYear
        };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this.SetCanChangeIsSingleDayRelease();
    }

    private async Task OnPeriodChanged()
    {
        this.SetCanChangeIsSingleDayRelease();
        await this.Changed.InvokeAsync();
    }

    private void SetCanChangeIsSingleDayRelease() =>
        this.CanChangeIsSingleDayRelease =
            this.FormModel.StartMonth == this.FormModel.EndMonth &&
            this.FormModel.StartYear == this.FormModel.EndYear;
}
