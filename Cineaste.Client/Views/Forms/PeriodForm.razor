@inherits CineasteComponent

<CascadingValue Value="@(() => this.FormModel.ToRequest())" IsFixed="true">
    <MonthYearPicker @bind-Month="this.FormModel.StartMonth" @bind-Year="this.FormModel.StartYear" Class="mt-2"
                     MonthText="@($"PeriodForm.{(!this.FormModel.IsSingleDayRelease ? "StartMonth" : "ReleaseMonth")}")"
                     YearText="@($"PeriodForm.{(!this.FormModel.IsSingleDayRelease ? "StartYear" : "ReleaseYear")}")"
                     Changed="@this.OnPeriodChanged" YearValidator="@this.StartYearValidator" Parent="@this" />

    @if (!this.FormModel.IsSingleDayRelease)
    {
        <MonthYearPicker @bind-Month="this.FormModel.EndMonth" @bind-Year="this.FormModel.EndYear" Class="mt-1"
                         MonthText="PeriodForm.EndMonth" YearText="PeriodForm.EndYear" Parent="@this"
                         Changed="@this.OnPeriodChanged" YearValidator="@this.EndYearValidator" />
    }

    <div>
        <FormValidator Validator="@this.PeriodValidator" Value="@this.FormModel.StartMonth"
                       Trigger="@(new { this.FormModel.StartYear, this.FormModel.EndMonth, this.FormModel.EndYear })"/>
    </div>

    <RadzenLabel Text="@this.Loc["PeriodForm.EpisodeCount"]" Component="EpisodeCountNumeric" class="mt-1" />

    <div class="row">
        <div class="col-md pe-md-1">
            <RadzenNumeric @bind-Value="this.FormModel.EpisodeCount" Name="EpisodeCountNumeric" />
        </div>
        <div class="col-md ps-md-1 d-flex align-items-center">
            <div>
                <RadzenCheckBox @bind-Value="@this.FormModel.IsSingleDayRelease" Name="IsSingleDayReleaseCheckBox"
                                Disabled="@(!this.CanChangeIsSingleDayRelease)" />
                <RadzenLabel Text="@this.Loc["PeriodForm.IsSingleDayRelease"]" Component="IsSingleDayReleaseCheckBox" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md pe-md-1">
            <FormValidator Validator="@this.EpisodeCountValidator" Value="@this.FormModel.EpisodeCount" />
        </div>
        <div class="col-md ps-md-1 d-flex align-items-center">
            <FormValidator Validator="@this.IsSingleDayReleaseValidator" Value="@this.FormModel.IsSingleDayRelease"
                           Trigger="@this.FormModel.EpisodeCount" />
        </div>
    </div>

    <RadzenLabel Text="@this.Loc["PeriodForm.RottenTomatoesId"]" Component="RottenTomatoesTextBox" class="mt-2" />

    <div class="d-flex flex-row align-items-center w-100">
        <RadzenTextBox @bind-Value="@this.FormModel.RottenTomatoesId" Change="@this.Changed"
                       Name="RottenTomatoesTextBox" class="w-100" />

        @if (this.CanRemove)
        {
            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"
                          Click="@this.Removed" class="ms-2" />
        }
    </div>

    <div>
        <FormValidator Validator="@this.RottenTomatoesIdValidator" Value="@this.FormModel.RottenTomatoesId" />
    </div>
</CascadingValue>

@code {
    [Parameter]
    public PeriodFormModel FormModel { get; set; } = null!;

    [Parameter]
    public bool CanRemove { get; set; }

    [Parameter]
    public EventCallback Changed { get; set; }

    [Parameter]
    public EventCallback Removed { get; set; }

    [Parameter]
    public IValidationExecutor Parent { get; set; } = null!;

    private PropertyValidator<PeriodRequest, int>? StartYearValidator { get; set; }
    private PropertyValidator<PeriodRequest, int>? EndYearValidator { get; set; }
    private PropertyValidator<PeriodRequest, int>? PeriodValidator { get; set; }
    private PropertyValidator<PeriodRequest, int>? EpisodeCountValidator { get; set; }
    private PropertyValidator<PeriodRequest, bool>? IsSingleDayReleaseValidator { get; set; }
    private PropertyValidator<PeriodRequest, string>? RottenTomatoesIdValidator { get; set; }

    private bool CanChangeIsSingleDayRelease { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        this.InitializeValidators();
        this.SetCanChangeIsSingleDayRelease();

        this.AttachValidationTo(this.Parent);
    }

    private void InitializeValidators()
    {
        var validator = PeriodRequest.CreateValidator();

        this.StartYearValidator = PropertyValidator.Create(validator, (PeriodRequest req) => req.StartYear, this);
        this.EndYearValidator = PropertyValidator.Create(validator, (PeriodRequest req) => req.EndYear, this);
        this.PeriodValidator = PropertyValidator.Create(validator, (PeriodRequest req) => req.StartMonth, this);
        this.EpisodeCountValidator = PropertyValidator.Create(validator, (PeriodRequest req) => req.EpisodeCount, this);

        this.IsSingleDayReleaseValidator = PropertyValidator.Create(
            validator, (PeriodRequest req) => req.IsSingleDayRelease, this);

        this.RottenTomatoesIdValidator = PropertyValidator.Create(
            validator, (PeriodRequest req) => req.RottenTomatoesId, this);
    }

    private async Task OnPeriodChanged()
    {
        this.SetCanChangeIsSingleDayRelease();
        await this.Changed.InvokeAsync();
    }

    private void SetCanChangeIsSingleDayRelease() =>
        this.CanChangeIsSingleDayRelease =
            this.FormModel.StartMonth == this.FormModel.EndMonth &&
            this.FormModel.StartYear == this.FormModel.EndYear;
}
