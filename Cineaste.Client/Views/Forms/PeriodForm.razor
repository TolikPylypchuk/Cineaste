@inherits CineasteForm<PeriodFormModel, PeriodRequest, PeriodModel, SeriesFormState>

<FormParamsProvider For="this">
    @{
        string startMonthText = $"PeriodForm.{(!this.FormModel.IsSingleDayRelease ? "StartMonth" : "ReleaseMonth")}";
        string startYearText = $"PeriodForm.{(!this.FormModel.IsSingleDayRelease ? "StartYear" : "ReleaseYear")}";
    }

    <MonthYearPicker @bind-Month="this.FormModel.StartMonth" @bind-Year="this.FormModel.StartYear" 
                     MonthText="@startMonthText" YearText="@startYearText" Changed="@this.OnPeriodChanged"
                     YearErrorCode="Period.StartYear.*" />

    @if (!this.FormModel.IsSingleDayRelease)
    {
        <MonthYearPicker @bind-Month="this.FormModel.EndMonth" @bind-Year="this.FormModel.EndYear"
                         MonthText="PeriodForm.EndMonth" YearText="PeriodForm.EndYear"
                         Changed="@this.OnPeriodChanged" YearErrorCode="Period.EndYear.*" />
    }

    <div>
        <ErrorPresenter ErrorCode="Period.Invalid" Trigger="@this.InvalidPeriodTrigger" />
    </div>

    <div class="episode-count-container">
        <div>
            <FluentNumberField @bind-Value="this.FormModel.EpisodeCount" Class="form-field">
                @this.Loc["PeriodForm.EpisodeCount"]
            </FluentNumberField>
            <ErrorPresenter ErrorCode="Period.EpisodeCount.*" Trigger="@this.FormModel.EpisodeCount" />
        </div>
        <div>
            <div>
                <FluentCheckbox @bind-Value="@this.FormModel.IsSingleDayRelease"
                                Disabled="@(!this.CanChangeIsSingleDayRelease)">
                    @this.Loc["PeriodForm.IsSingleDayRelease"]
                </FluentCheckbox>
                <ErrorPresenter ErrorCode="Period.IsSingleDayRelease.*"
                                Trigger="@(new { this.FormModel.IsSingleDayRelease, this.FormModel.EpisodeCount })" />
            </div>
        </div>
    </div>

    <div class="rotten-tomatoes-container">
        <div class="rotten-tomatoes">
            <FluentTextField @bind-Value="@this.FormModel.RottenTomatoesId" Class="form-field">
                @this.Loc["PeriodForm.RottenTomatoesId"]
            </FluentTextField>
            <ErrorPresenter ErrorCode="Period.RottenTomatoesId.*" Trigger="@this.FormModel.RottenTomatoesId" />
        </div>

        @if (this.CanRemove)
        {
            <FluentButton Appearance="Appearance.Stealth" @onclick="@this.Removed">
                <FluentIcon Name="@FluentIcons.Dismiss" Color="Color.Neutral" />
            </FluentButton>
        }
    </div>
</FormParamsProvider>

@code {
    [Parameter]
    public override PeriodFormModel FormModel { get; set; } = null!;

    [Parameter]
    public bool CanRemove { get; set; }

    [Parameter]
    public EventCallback Changed { get; set; }

    [Parameter]
    public EventCallback Removed { get; set; }

    private bool CanChangeIsSingleDayRelease { get; set; }

    private object InvalidPeriodTrigger =>
        new
        {
            this.FormModel.StartMonth,
            this.FormModel.StartYear,
            this.FormModel.EndMonth,
            this.FormModel.EndYear
        };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this.SetCanChangeIsSingleDayRelease();
    }

    private async Task OnPeriodChanged()
    {
        this.SetCanChangeIsSingleDayRelease();
        await this.Changed.InvokeAsync();
    }

    private void SetCanChangeIsSingleDayRelease() =>
        this.CanChangeIsSingleDayRelease =
            this.FormModel.StartMonth == this.FormModel.EndMonth &&
            this.FormModel.StartYear == this.FormModel.EndYear;
}
