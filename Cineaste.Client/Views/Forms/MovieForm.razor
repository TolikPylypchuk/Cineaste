@inherits StatefulComponent<MovieFormState>

<div class="d-flex flex-column h-100">
    <div class="d-flex flex-row justify-content-between">
        <div></div>
        <div></div>
        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" Click="this.Close"
                      class="my-2" />
    </div>

    @if (this.State.Value.IsLoading)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="mt-4" />
    } else if (this.State.Value.FetchProblem is not null)
    {
        <ApiProblemAlert Text="@this.Loc["MovieForm.Problem.LoadingFailed"]" Problem="@this.State.Value.FetchProblem"
                         Class="w-100 m-4" TryAgain="@this.FetchMovie" />
    } else
    {
        <h1 style="font-weight: 300">
            @(!String.IsNullOrEmpty(this.FormTitle) || this.ListItem != null
                ? this.FormTitle
                : this.Loc["MovieForm.NewMovie"])
        </h1>

        <div class="w-100 h-100 d-flex flex-column justify-content-between">
            <div class="h-100">
                <div class="d-md-flex justify-content-md-center mt-2">
                    <div class="me-md-1">
                        <RadzenCheckBox @bind-Value="@this.IsWatched" Disabled="@(!this.CanChangeIsWatched)"
                                        Change="@((bool value) => this.OnIsWatchedChanged())"
                                        Name="IsWatchedCheckBox" />
                        <RadzenLabel Text="@this.Loc["MovieForm.IsWatched"]" Component="IsWatchedCheckBox" />
                    </div>
                    <div class="ms-md-1">
                        <RadzenCheckBox @bind-Value="@this.IsReleased" Disabled="@(!this.CanChangeIsReleased)"
                                        Change="@((bool value) => this.OnIsReleasedChanged())"
                                        Name="IsReleasedCheckBox" />
                        <RadzenLabel Text="@this.Loc["MovieForm.IsReleased"]" Component="IsReleasedCheckBox" />
                    </div>
                </div>

                <RadzenLabel Text="@this.Loc["MovieForm.Titles"]" class="mt-2" />
                <TitlesForm @ref="this.TitlesForm" Titles="@this.Titles" Validator="@this.TitlesValidator"
                            FirstTitleChanged="@this.UpdateFormTitle" />

                <RadzenLabel Text="@this.Loc["MovieForm.OriginalTitles"]" class="mt-2" />
                <TitlesForm @ref="this.OriginalTitlesForm" Titles="@this.OriginalTitles"
                            Validator="@this.OriginalTitlesValidator" />

                <div class="row mt-2">
                    <div class="col-md pe-md-1">
                        <RadzenLabel Text="@this.Loc["MovieForm.Year"]" Component="YearNumeric" />
                        <RadzenNumeric @bind-Value="this.Year" Change="@((int year) => this.OnYearChanged())"
                                       Name="YearNumeric" />
                        <FormValidator Validator="@this.YearValidator" Value="@this.Year" />
                    </div>
                    <div class="col-md ps-md-1">
                        <RadzenLabel Text="@this.Loc["MovieForm.Kind"]" Component="KindDropDown" />
                        <RadzenDropDown @bind-Value="@this.Kind" Data="@this.State.Value.AvailableKinds"
                                        AllowVirtualization="false" AllowClear="false" AllowFiltering="false"
                                        Name="KindDropDown" TextProperty="Name" />
                    </div>
                </div>

                <RadzenLabel Text="@this.Loc["MovieForm.ImdbId"]" Component="ImdbIdTextBox" class="mt-2" />
                <RadzenTextBox @bind-Value="@this.ImdbId" Name="ImdbIdTextBox" class="w-100" />
                <FormValidator Validator="@this.ImdbIdValidator" Value="@this.ImdbId" />

                <RadzenLabel Text="@this.Loc["MovieForm.RottenTomatoesLink"]" Component="RottenTomatoesTextBox"
                             class="mt-2" />
                <RadzenTextBox @bind-Value="@this.RottenTomatoesLink" Name="RottenTomatoesTextBox" class="w-100" />
                <FormValidator Validator="@this.RottenTomatoesLinkValidator" Value="@this.RottenTomatoesLink" />

                <div class="d-flex justify-content-center">
                    <div class="mt-2" style="display: inline-grid; grid-template-columns: 1fr 1fr">
                        <RadzenButton Text="@this.Loc["MovieForm.AddTitle"]" ButtonStyle="ButtonStyle.Secondary"
                                      Click="@(e => this.AddTitle(this.Titles))" class="d-inline-block me-1" />
                        <RadzenButton Text="@this.Loc["MovieForm.AddOriginalTitle"]" ButtonStyle="ButtonStyle.Secondary"
                                      Click="@(e => this.AddTitle(this.OriginalTitles))" class="d-inline-block ms-1" />
                    </div>
                </div>
            </div>

            @if (this.State.Value.IsCreatingMovie)
            {
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="mt-4" />
            } else if (this.State.Value.CreateMovieProblem is not null)
            {
                <ApiProblemAlert Text="@this.Loc["MovieForm.Problem.CreatingFailed"]" TryAgain="@this.Save"
                                 Problem="@this.State.Value.CreateMovieProblem" Class="w-100 m-4" />
            }

            <div class="d-flex flex-row my-2">
                <RadzenButton Text="@this.Loc["Button.Save"]" ButtonStyle="ButtonStyle.Primary"
                              Click="@this.Save" class="me-1" />
                <RadzenButton Text="@this.Loc["Button.Cancel"]" ButtonStyle="ButtonStyle.Secondary"
                              Click="@this.Cancel" class="ms-1" />
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid ListId { get; set; }

    [Parameter]
    public ListItemModel? ListItem { get; set; }

    [Parameter]
    public EventCallback Close { get; set; }

    private string FormTitle { get; set; } = String.Empty;

    private ObservableCollection<string> Titles { get; set; } = new();
    private ObservableCollection<string> OriginalTitles { get; set; } = new();

    private TitlesForm<MovieRequest> TitlesForm { get; set; } = null!;
    private TitlesForm<MovieRequest> OriginalTitlesForm { get; set; } = null!;

    private bool IsWatched { get; set; }
    private bool IsReleased { get; set; }

    private bool CanChangeIsWatched { get; set; } = true;
    private bool CanChangeIsReleased { get; set; } = true;

    private int Year { get; set; }

    private ListKindModel Kind { get; set; } = null!;

    private string ImdbId { get; set; } = String.Empty;
    private string RottenTomatoesLink { get; set; } = String.Empty;

    private PropertyValidator<MovieRequest, ImmutableList<TitleRequest>>? TitlesValidator { get; set; }
    private PropertyValidator<MovieRequest, ImmutableList<TitleRequest>>? OriginalTitlesValidator { get; set; }
    private PropertyValidator<MovieRequest, int>? YearValidator { get; set; }
    private PropertyValidator<MovieRequest, string>? ImdbIdValidator { get; set; }
    private PropertyValidator<MovieRequest, string>? RottenTomatoesLinkValidator { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        this.InitializeValidators();
        this.SetPropertyValues();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            this.SubscribeToAction<FetchMovieResultAction>(_ => this.SetPropertyValues());
            this.SubscribeToAction<CreateMovieResultAction>(_ => this.OnMovieCreated());
        }
    }

    private void InitializeValidators()
    {
        var validator = MovieRequest.CreateValidator();

        this.TitlesValidator = PropertyValidator.Create(validator, (MovieRequest req) => req.Titles, this);

        this.OriginalTitlesValidator = PropertyValidator.Create(
            validator, (MovieRequest req) => req.OriginalTitles, this);

        this.YearValidator = PropertyValidator.Create(validator, (MovieRequest req) => req.Year, this);

        this.ImdbIdValidator = PropertyValidator.Create(validator, (MovieRequest req) => req.ImdbId, this);

        this.RottenTomatoesLinkValidator = PropertyValidator.Create(
            validator, (MovieRequest req) => req.RottenTomatoesLink, this);
    }

    private void FetchMovie()
    {
        if (this.ListItem != null)
        {
            this.Dispatcher.Dispatch(new FetchMovieAction(this.ListItem.Id, this.State.Value.AvailableKinds));
        }
    }

    private void SetPropertyValues()
    {
        var movie = this.State.Value.MovieModel;

        this.Titles = movie?.Titles?.Select(title => title.Name)?.ToObservableCollection()
            ?? new() { String.Empty };

        this.OriginalTitles = movie?.OriginalTitles?.Select(title => title.Name)?.ToObservableCollection()
            ?? new() { String.Empty };

        this.IsWatched = movie?.IsWatched ?? false;
        this.IsReleased = movie?.IsReleased ?? true;
        this.Year = movie?.Year ?? DateTime.Now.Year;
        this.Kind = movie?.Kind ?? this.State.Value.AvailableKinds.FirstOrDefault()!;
        this.ImdbId = movie?.ImdbId ?? String.Empty;
        this.RottenTomatoesLink = movie?.RottenTomatoesLink ?? String.Empty;

        this.UpdateFormTitle();
    }

    private void AddTitle(ObservableCollection<string> titles) =>
        titles.Add(String.Empty);

    private void UpdateFormTitle() =>
        this.FormTitle = this.Titles.FirstOrDefault() ?? String.Empty;

    private void OnYearChanged()
    {
        int currentYear = DateTime.Now.Year;

        if (this.Year < currentYear)
        {
            this.IsReleased = true;
            this.CanChangeIsWatched = true;
            this.CanChangeIsReleased = false;
        } else if (this.Year > currentYear)
        {
            this.IsWatched = false;
            this.IsReleased = false;
            this.CanChangeIsWatched = false;
            this.CanChangeIsReleased = false;
        } else
        {
            this.CanChangeIsWatched = true;
            this.CanChangeIsReleased = true;
        }
    }

    private void OnIsWatchedChanged()
    {
        if (this.IsWatched)
        {
            this.IsReleased = true;
        }
    }

    private void OnIsReleasedChanged()
    {
        if (!this.IsReleased)
        {
            this.IsWatched = false;
        }
    }

    private void Save() =>
        this.WithValidation(() =>
        {
            if (this.ListItem == null)
            {
                this.Dispatcher.Dispatch(new CreateMovieAction(this.CreateMovieRequest()));
            }
        });

    private void Cancel() =>
        this.SetPropertyValues();

    private void OnMovieCreated()
    {
        this.SetPropertyValues();
        this.NotificationService.Notify(new()
        {
            Summary = this.Loc["MovieForm.CreateMovie.Success"],
            Severity = NotificationSeverity.Success,
            Duration = 2000
        });
    }

    private MovieRequest CreateMovieRequest() =>
        new(
            this.ListId,
            this.TitlesForm.TitlesRequests,
            this.OriginalTitlesForm.TitlesRequests,
            this.Year,
            this.IsWatched,
            this.IsReleased,
            this.Kind.Id,
            this.ImdbId,
            this.RottenTomatoesLink);
}
