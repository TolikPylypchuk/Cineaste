@inherits CineasteForm<MovieFormModel, MovieRequest, MovieModel, MovieFormState>

<FormParamsProvider For="this">
    <div class="container">
        <div class="form-header">
            <div></div>
            <div></div>
            <FluentButton Appearance="Appearance.Lightweight" @onclick="this.Close">
                <FluentIcon Name="@FluentIcons.Dismiss" Color="Color.Neutral" />
            </FluentButton>
        </div>

        @if (this.State.Value.Fetch.IsInProgress)
        {
            <FluentProgressRing Class="loading-circle" />
        } else if (this.State.Value.Fetch.Problem is not null)
        {
            <ApiProblemAlert Text="MovieForm.Problem.LoadingFailed" Problem="@this.State.Value.Fetch.Problem"
                             TryAgain="@this.FetchMovie" Class="problem-alert main" />
        } else
        {
            <div class="form-container">
                <h2 class="form-title">
                    @(!String.IsNullOrEmpty(this.FormTitle) || this.ListItem is not null
                        ? this.FormTitle
                        : this.Loc["MovieForm.NewMovie"])
                </h2>

                <div class="form">
                    <div class="form-links">
                        @if (this.HasImdbId())
                        {
                            <FluentAnchor Href="@String.Format(this.Loc["Link.ImdbUrlFormat"], this.FormModel.ImdbId)"
                                          Target="_blank" Appearance="Appearance.Hypertext">
                                @this.Loc["Link.Imdb"]
                            </FluentAnchor>
                        }

                        @if (this.HasRottenTomatoesId())
                        {
                            <FluentAnchor Href="@String.Format(
                                            this.Loc["Link.RottenTomatoesUrlFormat"],
                                            this.FormModel.RottenTomatoesId)"
                                          Target="_blank" Appearance="Appearance.Hypertext">
                                @this.Loc["Link.RottenTomatoes"]
                            </FluentAnchor>
                        }
                    </div>

                    <div class="form-checkboxes">
                        <FluentCheckbox Value="@this.FormModel.IsWatched"
                                        ValueExpression="@(() => this.FormModel.IsWatched)"
                                        ValueChanged="@this.OnIsWatchedChanged"
                                        Disabled="@(!this.CanChangeIsWatched)">
                            @this.Loc["MovieForm.IsWatched"]
                        </FluentCheckbox>
                        <FluentCheckbox Value="@this.FormModel.IsReleased"
                                        ValueExpression="@(() => this.FormModel.IsReleased)"
                                        ValueChanged="@this.OnIsReleasedChanged"
                                        Disabled="@(!this.CanChangeIsReleased)">
                            @this.Loc["MovieForm.IsReleased"]
                        </FluentCheckbox>
                    </div>

                    <TitlesForm Titles="@this.FormModel.Titles" Label="MovieForm.Titles"
                                PropertyName="@nameof(this.FormModel.Titles)" />

                    <TitlesForm Titles="@this.FormModel.OriginalTitles" Label="MovieForm.OriginalTitles"
                                PropertyName="@nameof(this.FormModel.OriginalTitles)" />

                    <div class="form-year-kind">
                        <div>
                            <FluentNumberField Value="@this.FormModel.Year" Class="form-field"
                                               ValueExpression="@(() => this.FormModel.Year)"
                                               ValueChanged="@((int year) => this.OnYearChanged(year))">
                                @this.Loc["MovieForm.Year"]
                            </FluentNumberField>
                            <ErrorPresenter ErrorCode="Movie.Year.*" Trigger="@this.FormModel.Year" />
                        </div>
                        <div>
                            <label class="label" for="kind">@this.Loc["MovieForm.Kind"]</label>
                            <FluentSelect Id="kind" Items="this.State.Value.AvailableKinds"
                                          @bind-SelectedOption="this.FormModel.Kind"
                                          OptionText="@(k => k.Name)" Class="kind-select form-field" />
                        </div>
                    </div>

                    <div>
                        <FluentTextField @bind-Value="@this.FormModel.ImdbId" Class="form-field">
                            @this.Loc["MovieForm.ImdbId"]
                        </FluentTextField>
                        <ErrorPresenter ErrorCode="Movie.ImdbId.*" Trigger="@this.FormModel.ImdbId" />
                    </div>

                    <div>
                        <FluentTextField @bind-Value="@this.FormModel.RottenTomatoesId" Class="form-field">
                            @this.Loc["MovieForm.RottenTomatoesId"]
                        </FluentTextField>
                        <ErrorPresenter ErrorCode="Movie.RottenTomatoesId.*"
                                        Trigger="@this.FormModel.RottenTomatoesId" />
                    </div>

                    <div class="add-titles">
                        <FluentButton Appearance="Appearance.Neutral"
                                      @onclick="@(() => this.AddTitle(this.FormModel.Titles))">
                            @this.Loc["MovieForm.AddTitle"]
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Neutral"
                                      @onclick="@(() => this.AddTitle(this.FormModel.OriginalTitles))">
                            @this.Loc["MovieForm.AddOriginalTitle"]
                        </FluentButton>
                    </div>

                    @if (this.ListItem is not null)
                    {
                        <div class="delete-container">
                            <FluentButton Appearance="Appearance.Neutral" @onclick="@this.Delete"
                                          Disabled="@this.State.Value.Delete.IsInProgress">
                                @this.Loc[this.State.Value.Delete.IsInProgress ? "Button.Delete.Busy" : "Button.Delete"]
                            </FluentButton>

                            <ConfirmationDialog @ref="this.deleteConfirmationDialog"
                                                Title="MovieForm.DeleteDialog.Title"
                                                Body="MovieForm.DeleteDialog.Body" />
                        </div>
                    }
                </div>

                @if (this.State.Value.Create.Problem is not null)
                {
                    <ApiProblemAlert Text="MovieForm.Problem.CreatingFailed" TryAgain="@this.Save"
                                     Problem="@this.State.Value.Create.Problem" Class="problem-alert" />
                }

                @if (this.State.Value.Update.Problem is not null)
                {
                    <ApiProblemAlert Text="MovieForm.Problem.UpdatingFailed" TryAgain="@this.Save"
                                     Problem="@this.State.Value.Update.Problem" Class="problem-alert" />
                }

                @if (this.State.Value.Delete.Problem is not null)
                {
                    <ApiProblemAlert Text="MovieForm.Problem.DeletingFailed" TryAgain="@this.Delete"
                                     Problem="@this.State.Value.Delete.Problem" Class="problem-alert" />
                }

                <div class="@($"form-actions{(this.FormModel.HasChanges ? "" : " hidden")}")">
                    <FluentButton Appearance="Appearance.Accent" @onclick="@this.Save" Disabled="@this.IsSaving">
                        @this.Loc[this.IsSaving ? "Button.Save.Busy" : "Button.Save"]
                    </FluentButton>
                    <FluentButton Appearance="Appearance.Neutral" @onclick="@this.Cancel" Disabled="@this.IsSaving">
                        @this.Loc["Button.Cancel"]
                    </FluentButton>
                </div>
            </div>
        }
    </div>
</FormParamsProvider>
