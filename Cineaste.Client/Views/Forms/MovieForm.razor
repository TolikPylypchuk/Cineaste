@inherits CineasteForm<MovieFormModel, MovieRequest, MovieModel, MovieFormState>
@using MudBlazor

<FormParamsProvider For="this">
    <div class="container list-sidebar">
        <div class="form-header">
            <div></div>
            <div></div>
            <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" aria-label="close"
                           @onclick="this.Close" />
        </div>

        @if (this.State.Value.Fetch.IsInProgress)
        {
            <MudProgressCircular Indeterminate="true" Color="MudBlazor.Color.Primary" Class="loading-circle" />
        } else if (this.State.Value.Fetch.Problem is not null)
        {
            <ApiProblemAlert Text="MovieForm.Problem.LoadingFailed" Problem="@this.State.Value.Fetch.Problem"
                             TryAgain="@this.FetchMovie" Class="problem-alert main" />
        } else
        {
            <div class="form-container list-sidebar">
                <h2 class="form-title">
                    @(!String.IsNullOrEmpty(this.FormTitle) || this.ListItem is not null
                        ? this.FormTitle
                        : this.Loc["MovieForm.NewMovie"])
                </h2>

                <div class="form">
                    <div class="form-links">
                        @if (this.HasImdbId())
                        {
                            string href = String.Format(this.Loc["Link.ImdbUrlFormat"], this.FormModel.ImdbId);

                            <MudLink Href="@href" Target="_blank">
                                @this.Loc["Link.Imdb"]
                            </MudLink>
                        }

                        @if (this.HasRottenTomatoesId())
                        {
                            string href = String.Format(
                                this.Loc["Link.RottenTomatoesUrlFormat"],
                                this.FormModel.RottenTomatoesId);

                            <MudLink Href="@href" Target="_blank">
                                @this.Loc["Link.RottenTomatoes"]
                            </MudLink>
                        }
                    </div>

                    <div class="form-checkboxes">
                        <MudCheckBox Checked="@this.FormModel.IsWatched" Color="MudBlazor.Color.Primary"
                                     CheckedChanged="@((bool value) => this.OnIsWatchedChanged(value))"
                                     Disabled="@(!this.CanChangeIsWatched)" Size="Size.Small">
                            @this.Loc["MovieForm.IsWatched"]
                        </MudCheckBox>
                        <MudCheckBox Checked="@this.FormModel.IsReleased" Color="MudBlazor.Color.Primary"
                                     CheckedChanged="@((bool value) => this.OnIsReleasedChanged(value))"
                                     Disabled="@(!this.CanChangeIsReleased)" Size="Size.Small">
                            @this.Loc["MovieForm.IsReleased"]
                        </MudCheckBox>
                    </div>

                    <TitlesForm Titles="@this.FormModel.Titles" Label="MovieForm.Title"
                                PropertyName="@nameof(this.FormModel.Titles)" />

                    <TitlesForm Titles="@this.FormModel.OriginalTitles" Label="MovieForm.OriginalTitle"
                                PropertyName="@nameof(this.FormModel.OriginalTitles)" />

                    <div class="form-year-kind">
                        <div>
                            <MudNumericField Label="@this.Loc["MovieForm.Year"]" Value="@this.FormModel.Year"
                                             ValueChanged="@((int year) => this.OnYearChanged(year))"
                                             Class="form-field" />
                            <ErrorPresenter ErrorCode="Movie.Year.*" Trigger="@this.FormModel.Year" />
                        </div>
                        <div>
                            <MudSelect T="ListKindModel" @bind-Value="this.FormModel.Kind"
                                       Label="@this.Loc["MovieForm.Kind"]" Class="kind-select form-field">
                                @foreach (var kind in this.State.Value.AvailableKinds)
                                {
                                    <MudSelectItem Value="kind">
                                        @kind.Name
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                    </div>

                    <div>
                        <MudTextField @bind-Value="@this.FormModel.ImdbId" Class="form-field"
                                      Label="@this.Loc["MovieForm.ImdbId"]" />
                        <ErrorPresenter ErrorCode="Movie.ImdbId.*" Trigger="@this.FormModel.ImdbId" />
                    </div>

                    <div>
                        <MudTextField @bind-Value="@this.FormModel.RottenTomatoesId" Class="form-field"
                                      Label="@this.Loc["MovieForm.RottenTomatoesId"]" />
                        <ErrorPresenter ErrorCode="Movie.RottenTomatoesId.*"
                                        Trigger="@this.FormModel.RottenTomatoesId" />
                    </div>

                    <div class="add-titles">
                        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Surface" Size="Size.Small"
                                   @onclick="@(() => this.AddTitle(this.FormModel.Titles))">
                            @this.Loc["MovieForm.AddTitle"]
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Surface" Size="Size.Small"
                                   @onclick="@(() => this.AddTitle(this.FormModel.OriginalTitles))">
                            @this.Loc["MovieForm.AddOriginalTitle"]
                        </MudButton>
                    </div>

                    @if (this.ListItem is not null)
                    {
                        <div class="delete-container">
                            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary"
                                       Disabled="@this.State.Value.Delete.IsInProgress" @onclick="@this.Delete">
                                @this.Loc[this.State.Value.Delete.IsInProgress ? "Button.Delete.Busy" : "Button.Delete"]
                            </MudButton>
                        </div>
                    }
                </div>

                @if (this.State.Value.Create.Problem is not null)
                {
                    <ApiProblemAlert Text="MovieForm.Problem.CreatingFailed" TryAgain="@this.Save"
                                     Problem="@this.State.Value.Create.Problem" Class="problem-alert" />
                }

                @if (this.State.Value.Update.Problem is not null)
                {
                    <ApiProblemAlert Text="MovieForm.Problem.UpdatingFailed" TryAgain="@this.Save"
                                     Problem="@this.State.Value.Update.Problem" Class="problem-alert" />
                }

                @if (this.State.Value.Delete.Problem is not null)
                {
                    <ApiProblemAlert Text="MovieForm.Problem.DeletingFailed" TryAgain="@this.Delete"
                                     Problem="@this.State.Value.Delete.Problem" Class="problem-alert" />
                }

                <div class="@($"form-actions{(this.FormModel.HasChanges ? "" : " hidden")}")">
                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@this.IsSaving"
                               @onclick="@this.Save">
                        @this.Loc[this.IsSaving ? "Button.Save.Busy" : "Button.Save"]
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Surface" Disabled="@this.IsSaving"
                               @onclick="@this.Cancel">
                        @this.Loc["Button.Cancel"]
                    </MudButton>
                </div>
            </div>
        }
    </div>
</FormParamsProvider>
