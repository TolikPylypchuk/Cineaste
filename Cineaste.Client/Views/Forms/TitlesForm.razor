@inherits CineasteComponent

@for (int i = 0; i < this.Titles.Count; i++)
{
    int index = i;
    <div>
        <div class="@($"{(index != 0 ? "mt-2" : "")} d-flex flex-row align-items-center w-100")">
            <RadzenTextBox Value="@this.Titles[index]" Change="@(value => this.UpdateTitle(value, index))"
                           class="w-100" />

            @if (this.Titles.Count > 1)
            {
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"
                              Click="@(() => this.RemoveTitle(index))" class="ms-2" />
            }
        </div>
    </div>
}

<div>
    <ErrorPresenter ErrorCode="@($"{this.PropertyName}.*")" Trigger="@this.ValidationTrigger" />
</div>

<div>
    <ErrorPresenter ErrorCode="@($"*.{this.PropertyName}.*")" Trigger="@this.ValidationTrigger" />
</div>

@code {
    [Parameter]
    public IList<string> Titles { get; set; } = new List<string>();

    [Parameter]
    public string PropertyName { get; set; } = String.Empty;

    private object ValidationTrigger { get; set; } = new();

    private async Task UpdateTitle(string title, int index)
    {
        this.Titles[index] = title;
        await this.ForceUpdateFormValidationState();
        this.UpdateValidation();
    }

    private async Task RemoveTitle(int index)
    {
        this.Titles.RemoveAt(index);
        await this.ForceUpdateFormValidationState();
        this.UpdateValidation();
    }

    private void UpdateValidation() =>
        this.ValidationTrigger = this.Titles.Aggregate(String.Empty, (acc, title) => $"{acc}{title}");

    private async Task ForceUpdateFormValidationState() =>
        await Task.Yield();
}
