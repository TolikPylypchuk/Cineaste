@inherits CineasteComponent
@typeparam T

@for (int i = 0; i < this.Titles.Count; i++)
{
    int index = i;
    <div>
        <div class="@($"{(index != 0 ? "mt-2" : "")} d-flex flex-row align-items-center w-100")">
            <RadzenTextBox Value="@this.Titles[index]" Change="@(value => this.UpdateTitle(value, index))"
                           class="w-100" />

            @if (this.Titles.Count > 1)
            {
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"
                              Click="@(() => this.Titles.RemoveAt(index))" class="ms-2" />
            }
        </div>

        <FormValidator Validator="this.TitleNameValidator" Value="@this.Titles[index]" />
    </div>
}

<div>
    <FormValidator Validator="@this.Validator" Value="@this.TitlesRequests" />
</div>

@code {
    [Parameter]
    public ObservableCollection<string> Titles { get; set; } = new();

    [Parameter]
    public PropertyValidator<T, ImmutableList<TitleRequest>>? Validator { get; set; }

    [Parameter]
    public EventCallback<string> FirstTitleChanged { get; set; }

    public ImmutableList<TitleRequest> TitlesRequests { get; private set; } = ImmutableList.Create<TitleRequest>();

    private PropertyValidator<TitleRequest, string>? TitleNameValidator { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        this.TitlesRequests = this.ConvertTitles();
        this.Titles.CollectionChanged += (sender, e) => this.TitlesRequests = this.ConvertTitles();

        this.TitleNameValidator = PropertyValidator.Create(
            TitleRequest.CreateValidator(), (TitleRequest req) => req.Name, this);
    }

    private async Task UpdateTitle(string title, int index)
    {
        this.Titles[index] = title;

        if (index == 0)
        {
            await this.FirstTitleChanged.InvokeAsync(title);
        }
    }

    private ImmutableList<TitleRequest> ConvertTitles() =>
        this.Titles
            .Select((title, index) => new TitleRequest(title, index + 1))
            .ToImmutableList();
}
