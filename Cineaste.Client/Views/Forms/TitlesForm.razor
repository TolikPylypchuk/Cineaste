@inherits CineasteComponent
@using MudBlazor

<div>
    <div class="titles-container">
        @for (int i = 0; i < this.Titles.Count; i++)
        {
            int index = i;
            string title = this.Titles[index];
            <div class="title-container">
                <MudTextField
                    Value="@title"
                    ValueChanged="@((string value) => this.UpdateTitle(value, index))"
                    Label="@this.Loc[this.Label]"
                    Class="title form-field"
                />

                @if (index == 0)
                {
                    <MudIconButton
                        Icon="@Icons.Material.Filled.Add"
                        Size="Size.Small"
                        @onclick="@(() => this.AddTitle())"
                        aria-label="@this.Loc["AriaLabel.Add"]"
                    />
                } else
                {
                    <MudIconButton
                        Icon="@Icons.Material.Filled.Close"
                        Size="Size.Small"
                        @onclick="@(() => this.RemoveTitle(index))"
                        aria-label="@this.Loc["AriaLabel.Remove"]"
                    />
                }
            </div>
        }
    </div>

    <ErrorPresenter ErrorCode="@($"{this.PropertyName}.*")" Trigger="@this.ValidationTrigger" />

    <ErrorPresenter ErrorCode="@($"*.{this.PropertyName}.*")" Trigger="@this.ValidationTrigger" />
</div>

@code {
    [Parameter]
    public IList<string> Titles { get; set; } = new List<string>();

    [Parameter]
    public string Label { get; set; } = String.Empty;

    [Parameter]
    public string PropertyName { get; set; } = String.Empty;

    private object ValidationTrigger { get; set; } = new();

    private async Task UpdateTitle(string title, int index)
    {
        this.Titles[index] = title;
        await this.UpdateValidation();
    }

    private void AddTitle() =>
        this.Titles.Add(String.Empty);

    private async Task RemoveTitle(int index)
    {
        this.Titles.RemoveAt(index);
        await this.UpdateValidation();
    }

    private async Task UpdateValidation()
    {
        await this.ForceUpdateFormValidationState();
        this.ValidationTrigger = this.Titles.Aggregate(String.Empty, (acc, title) => $"{acc}{title}");
    }

    private async Task ForceUpdateFormValidationState() =>
        await Task.Yield();
}
