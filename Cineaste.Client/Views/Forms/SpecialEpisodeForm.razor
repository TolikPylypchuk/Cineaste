@inherits CineasteForm<SpecialEpisodeFormModel, SpecialEpisodeRequest, SpecialEpisodeModel, SeriesFormState>

<FormParamsProvider For="this">
    <div class="container list-sidebar">
        <div class="form-header">
            <FluentButton Appearance="Appearance.Lightweight" @onclick="this.GoToSeries">
                <FluentIcon Name="@FluentIcons.ChevronUp" Color="Color.Neutral" />
            </FluentButton>

            <div class="go-to-other-components-container">
                <FluentButton Appearance="Appearance.Lightweight" @onclick="this.OnGoToPreviousComponent"
                              Class="@(this.FormModel.IsFirst ? "invisible" : null)"
                              aria-hidden="@this.FormModel.IsFirst">
                    <FluentIcon Name="@FluentIcons.ChevronLeft" Color="Color.Neutral" />
                </FluentButton>

                <FluentButton Appearance="Appearance.Lightweight" @onclick="this.OnGoToNextComponent"
                              Class="@(this.FormModel.IsLast ? "invisible" : null)"
                              aria-hidden="@this.FormModel.IsLast">
                    <FluentIcon Name="@FluentIcons.ChevronRight" Color="Color.Neutral" />
                </FluentButton>
            </div>

            <FluentButton Appearance="Appearance.Lightweight" @onclick="this.Close">
                <FluentIcon Name="@FluentIcons.Dismiss" Color="Color.Neutral" />
            </FluentButton>
        </div>

        <div class="form-container list-sidebar">
            <h2 class="form-title">
                @(!String.IsNullOrEmpty(this.FormTitle) || this.Episode is not null
                    ? this.FormTitle
                    : this.Loc["SpecialEpisodeForm.NewSpecialEpisode"])
            </h2>

            <div class="form">
                <div class="form-links">
                    @if (this.HasRottenTomatoesId())
                    {
                        string href = String.Format(
                            this.Loc["Link.RottenTomatoesUrlFormat"],
                            this.FormModel.RottenTomatoesId);

                        <FluentAnchor Href="@href" Target="_blank" Appearance="Appearance.Hypertext">
                            @this.Loc["Link.RottenTomatoes"]
                        </FluentAnchor>
                    }
                </div>

                <div class="form-checkboxes">
                    <FluentCheckbox Value="@this.FormModel.IsWatched"
                                    ValueExpression="@(() => this.FormModel.IsWatched)"
                                    ValueChanged="@this.OnIsWatchedChanged"
                                    Disabled="@(!this.CanChangeIsWatched)">
                        @this.Loc["SpecialEpisodeForm.IsWatched"]
                    </FluentCheckbox>
                    <FluentCheckbox Value="@this.FormModel.IsReleased"
                                    ValueExpression="@(() => this.FormModel.IsReleased)"
                                    ValueChanged="@this.OnIsReleasedChanged"
                                    Disabled="@(!this.CanChangeIsReleased)">
                        @this.Loc["SpecialEpisodeForm.IsReleased"]
                    </FluentCheckbox>
                </div>

                <TitlesForm Titles="@this.FormModel.Titles" Label="SpecialEpisodeForm.Titles"
                            PropertyName="@nameof(this.FormModel.Titles)" />

                <TitlesForm Titles="@this.FormModel.OriginalTitles" Label="SpecialEpisodeForm.OriginalTitles"
                            PropertyName="@nameof(this.FormModel.OriginalTitles)" />

                <div>
                    <FluentTextField @bind-Value="@this.FormModel.Channel" Class="form-field">
                        @this.Loc["SpecialEpisodeForm.Channel"]
                    </FluentTextField>
                    <ErrorPresenter ErrorCode="SpecialEpisode.Channel.*"
                                    Trigger="@this.FormModel.Channel" />
                </div>

                <MonthYearPicker Id="month-year" @bind-Month="this.FormModel.Month" @bind-Year="this.FormModel.Year"
                                 MonthText="SpecialEpisodeForm.ReleaseMonth" Changed="@this.OnMonthYearChanged"
                                 YearText="SpecialEpisodeForm.ReleaseYear" YearErrorCode="SpecialEpisode.Year.*" />

                <div>
                    <FluentTextField @bind-Value="@this.FormModel.RottenTomatoesId" Class="form-field">
                        @this.Loc["SpecialEpisodeForm.RottenTomatoesId"]
                    </FluentTextField>
                    <ErrorPresenter ErrorCode="SpecialEpisode.RottenTomatoesId.*"
                                    Trigger="@this.FormModel.RottenTomatoesId" />
                </div>

                <div class="add-titles">
                    <FluentButton Appearance="Appearance.Neutral"
                                  @onclick="@(() => this.AddTitle(this.FormModel.Titles))">
                        @this.Loc["SpecialEpisodeForm.AddTitle"]
                    </FluentButton>
                    <FluentButton Appearance="Appearance.Neutral"
                                  @onclick="@(() => this.AddTitle(this.FormModel.OriginalTitles))">
                        @this.Loc["SpecialEpisodeForm.AddOriginalTitle"]
                    </FluentButton>
                </div>

                <div class="delete-container">
                    <FluentButton Appearance="Appearance.Neutral" @onclick="@this.Delete">
                        @this.Loc["Button.Delete"]
                    </FluentButton>
                </div>
            </div>

            <div class="form-actions">
                <FluentButton Appearance="Appearance.Accent" @onclick="@this.GoToSeries">
                    @this.Loc["SpecialEpisodeForm.GoToSeries"]
                </FluentButton>

                @if (this.FormModel.HasChanges)
                {
                    <FluentButton Appearance="Appearance.Neutral" @onclick="@this.Cancel">
                        @this.Loc["Button.Cancel"]
                    </FluentButton>
                }
            </div>
        </div>
    </div>
</FormParamsProvider>
