@inherits CineasteForm<SeriesFormModel, SeriesRequest, SeriesModel, SeriesFormState>
@inject IGlobalEventProvider GlobalEventProvider

<FormParamsProvider For="this">
    <div class="container">
        <div class="form-header">
            <div></div>
            <div></div>
            <FluentButton Appearance="Appearance.Lightweight" @onclick="this.Close">
                <FluentIcon Name="@FluentIcons.Dismiss" Color="Color.Neutral" />
            </FluentButton>
        </div>

        @if (this.State.Value.Fetch.IsInProgress)
        {
            <FluentProgressRing Class="loading-circle" />
        } else if (this.State.Value.Fetch.Problem is not null)
        {
            <ApiProblemAlert Text="SeriesForm.Problem.LoadingFailed" TryAgain="@this.FetchSeries"
                             Problem="@this.State.Value.Fetch.Problem" Class="problem-alert main" />
        } else
        {
            <div class="form-container">
                <h2 class="form-title">
                    @(!String.IsNullOrEmpty(this.FormTitle) || this.ListItem is not null
                        ? this.FormTitle
                        : this.Loc["SeriesForm.NewSeries"])
                </h2>

                <div class="form">
                    <div class="form-links">
                        @if (this.HasImdbId())
                        {
                            <FluentAnchor Href="@String.Format(this.Loc["Link.ImdbUrlFormat"], this.FormModel.ImdbId)"
                                          Target="_blank" Appearance="Appearance.Hypertext">
                                @this.Loc["Link.Imdb"]
                            </FluentAnchor>
                        }

                        @if (this.HasRottenTomatoesId())
                        {
                            <FluentAnchor Href="@String.Format(
                                            this.Loc["Link.RottenTomatoesUrlFormat"],
                                            this.FormModel.RottenTomatoesId)"
                                          Target="_blank" Appearance="Appearance.Hypertext">
                                @this.Loc["Link.RottenTomatoes"]
                            </FluentAnchor>
                        }
                    </div>

                    <TitlesForm Titles="@this.FormModel.Titles" Label="SeriesForm.Titles"
                                PropertyName="@nameof(this.FormModel.Titles)" />

                    <TitlesForm Titles="@this.FormModel.OriginalTitles" Label="SeriesForm.OriginalTitles"
                                PropertyName="@nameof(this.FormModel.OriginalTitles)" />

                    <div class="form-statuses">
                        <div>
                            <label class="label" for="watch-status">@this.Loc["SeriesForm.WatchStatus"]</label>
                            <FluentSelect Id="watch-status" Items="@this.AllWatchStatuses" Class="select form-field"
                                          @bind-SelectedOption="this.FormModel.WatchStatus"
                                          OptionText="@(s => this.Loc[$"SeriesForm.WatchStatus.{s}"])" />
                            <ErrorPresenter ErrorCode="Series.WatchStatus.*" Trigger="@this.StatusErrorTrigger" />
                        </div>
                        <div>
                            <label class="label" for="release-status">@this.Loc["SeriesForm.ReleaseStatus"]</label>
                            <FluentSelect Id="release-status" Items="this.AllReleaseStatuses" Class="select form-field"
                                          @bind-SelectedOption="this.FormModel.ReleaseStatus"
                                          OptionText="@(s => this.Loc[$"SeriesForm.ReleaseStatus.{s}"])" />
                        </div>
                    </div>

                    <div>
                        <label class="label" for="kind">@this.Loc["SeriesForm.Kind"]</label>
                        <FluentSelect Id="kind" Items="this.State.Value.AvailableKinds"
                                      @bind-SelectedOption="this.FormModel.Kind"
                                      OptionText="@(o => o.Name)" Class="select form-field" />
                    </div>

                    <div class="components-container">
                        @foreach (var component in this.FormModel.Components)
                        {
                            <div role="button" class="component"
                                 @onclick="() => this.OpenSeriesComponentForm(component)">
                                <div class="component-text">@component.Title</div>
                                <FluentDivider Role="DividerRole.Separator" />
                            </div>
                            <div role="button" class="component"
                                 @onclick="() => this.OpenSeriesComponentForm(component)">
                                <div class="component-text">@component.Years</div>
                                <FluentDivider Role="DividerRole.Separator" />
                            </div>
                            <div role="button" class="component"
                                 @onclick="() => this.OpenSeriesComponentForm(component)">
                                @if (this.FormModel.Components.Count > 1)
                                {
                                    <div class="component-text">
                                        <div @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                            <FluentButton Appearance="Appearance.Stealth" Class="menu-button"
                                                          @onclick="@(() => this.ShowMenu(component))"
                                                          aria-expanded="@this.ShouldShowMenu(component)"
                                                          aria-haspopup="true">
                                                <FluentIcon Name="@FluentIcons.MoreVertical" Size="IconSize.Size16" />
                                            </FluentButton>
                                        </div>

                                        @if (this.ShouldShowMenu(component))
                                        {
                                            <FluentMenu Class="menu" @onclick:stopPropagation="true">
                                                @if (this.CanMoveUp(component))
                                                {
                                                    <FluentMenuItem @onclick="@(() => this.MoveUp(component))">
                                                        <span slot="start">
                                                            <FluentIcon Name="@FluentIcons.ArrowUp"
                                                                        Color="Color.Neutral" Size="IconSize.Size16" />
                                                        </span>
                                                        @this.Loc["SeriesForm.Component.Up"]
                                                    </FluentMenuItem>
                                                }

                                                @if (this.CanMoveDown(component))
                                                {
                                                    <FluentMenuItem @onclick="@(() => this.MoveDown(component))">
                                                        <span slot="start">
                                                            <FluentIcon Name="@FluentIcons.ArrowDown"
                                                                        Color="Color.Neutral" Size="IconSize.Size16" />
                                                        </span>
                                                        @this.Loc["SeriesForm.Component.Down"]
                                                    </FluentMenuItem>
                                                }
                                            </FluentMenu>
                                        }
                                    </div>
                                }

                                <FluentDivider Role="DividerRole.Separator" />
                            </div>
                        }
                    </div>
@*
                    <RadzenDataList WrapItems="true" Data="@this.FormModel.Components"
                                    class="overflow-visible w-100 mt-1">
                        <Template Context="component">
                            <div class="item-container d-flex flex-row justify-content-between border-bottom m-0 p-2"
                                    role="button" @onclick="() => this.OpenSeriesComponentForm(component)">
                                <p class="m-0">@component.Title</p>
                                <div class="d-flex flex-row">
                                    <p class="m-0">@component.Years</p>
                                    @if (this.FormModel.Components.Count > 1)
                                    {
                                        <div role="button" class="ms-1">
                                            <RadzenMenu>
                                                <RadzenMenuItem>
                                                    @if (this.CanMoveUp(component))
                                                    {
                                                        <RadzenMenuItem Text="@this.Loc["SeriesForm.Component.Up"]"
                                                                        Click="@(e => this.MoveUp(component))"
                                                                        Icon="keyboard_arrow_up" />
                                                    }

                                                    @if (this.CanMoveDown(component))
                                                    {
                                                        <RadzenMenuItem Text="@this.Loc["SeriesForm.Component.Down"]"
                                                                        Click="@(e => this.MoveDown(component))"
                                                                        Icon="keyboard_arrow_down" />
                                                    }
                                                </RadzenMenuItem>
                                            </RadzenMenu>
                                        </div>
                                    }
                                </div>
                            </div>
                        </Template>
                    </RadzenDataList>
*@
                    <div class="add-components">
                        <FluentButton Appearance="Appearance.Neutral" @onclick="@this.AddSeason">
                            @this.Loc["SeriesForm.AddSeason"]
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Neutral" @onclick="@this.AddSpecialEpisode">
                            @this.Loc["SeriesForm.AddSpecialEpisode"]
                        </FluentButton>
                    </div>

                    <div>
                        <ErrorPresenter ErrorCode="Series.Seasons.*" />
                    </div>

                    <div>
                        <FluentTextField @bind-Value="@this.FormModel.ImdbId" Class="form-field">
                            @this.Loc["SeriesForm.ImdbId"]
                        </FluentTextField>
                        <ErrorPresenter ErrorCode="Series.ImdbId.*" Trigger="@this.FormModel.ImdbId" />
                    </div>

                    <div>
                        <FluentTextField @bind-Value="@this.FormModel.RottenTomatoesId" Class="form-field">
                            @this.Loc["SeriesForm.RottenTomatoesId"]
                        </FluentTextField>
                        <ErrorPresenter ErrorCode="Series.RottenTomatoesId.*"
                                        Trigger="@this.FormModel.RottenTomatoesId" />
                    </div>

                    <div class="add-titles">
                        <FluentButton Appearance="Appearance.Neutral"
                                      @onclick="@(() => this.AddTitle(this.FormModel.Titles))">
                            @this.Loc["SeriesForm.AddTitle"]
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Neutral"
                                      @onclick="@(() => this.AddTitle(this.FormModel.OriginalTitles))">
                            @this.Loc["SeriesForm.AddOriginalTitle"]
                        </FluentButton>
                    </div>

                    @if (this.ListItem is not null)
                    {
                        <div class="delete-container">
                            <FluentButton Appearance="Appearance.Neutral" @onclick="@this.Delete"
                                          Disabled="@this.State.Value.Delete.IsInProgress">
                                @this.Loc[this.State.Value.Delete.IsInProgress ? "Button.Delete.Busy" : "Button.Delete"]
                            </FluentButton>

                            <ConfirmationDialog @ref="this.deleteConfirmationDialog"
                                                Title="SeriesForm.DeleteDialog.Title"
                                                Body="SeriesForm.DeleteDialog.Body" />
                        </div>
                    }
                </div>

                @if (this.State.Value.Create.Problem is not null)
                {
                    <ApiProblemAlert Text="SeriesForm.Problem.CreatingFailed" TryAgain="@this.OnSave"
                                     Problem="@this.State.Value.Create.Problem" Class="problem-alert" />
                }

                @if (this.State.Value.Update.Problem is not null)
                {
                    <ApiProblemAlert Text="SeriesForm.Problem.UpdatingFailed" TryAgain="@this.OnSave"
                                     Problem="@this.State.Value.Update.Problem" Class="problem-alert" />
                }

                @if (this.State.Value.Delete.Problem is not null)
                {
                    <ApiProblemAlert Text="SeriesForm.Problem.DeletingFailed" TryAgain="this.Delete"
                                     Problem="@this.State.Value.Delete.Problem" Class="problem-alert" />
                }

                <div class="@($"form-actions{(this.FormModel.HasChanges ? "" : " hidden")}")">
                    <FluentButton Appearance="Appearance.Accent" @onclick="@this.OnSave" Disabled="@this.IsSaving">
                        @this.Loc[this.IsSaving ? "Button.Save.Busy" : "Button.Save"]
                    </FluentButton>
                    <FluentButton Appearance="Appearance.Neutral" @onclick="@this.OnCancel" Disabled="@this.IsSaving">
                        @this.Loc["Button.Cancel"]
                    </FluentButton>
                </div>
            </div>
        }
    </div>
</FormParamsProvider>
