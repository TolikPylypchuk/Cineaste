@inherits CineasteForm<SeriesFormModel, SeriesRequest, SeriesModel, SeriesFormState>

<CascadingValue Name="@CascadingParameters.ValidationExecutor" Value="@this" IsFixed="true">
    <CascadingValue Name="@CascadingParameters.ErrorCodes" Value="@this.FormModel.ValidationErrors">
        <div class="d-flex flex-column h-100">
            <div class="d-flex flex-row justify-content-between">
                <div></div>
                <div></div>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" Click="this.Close"
                              class="btn-transparent my-2" />
            </div>

            @if (this.State.Value.Fetch.IsInProgress)
            {
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="mt-4" />
            } else if (this.State.Value.Fetch.Problem is not null)
            {
                <ApiProblemAlert Text="@this.Loc["SeriesForm.Problem.LoadingFailed"]" TryAgain="@this.FetchSeries"
                                 Problem="@this.State.Value.Fetch.Problem" Class="w-100" />
            } else
            {
                <h1 class="form-title">
                    @(!String.IsNullOrEmpty(this.FormTitle) || this.ListItem != null
                        ? this.FormTitle
                        : this.Loc["SeriesForm.NewSeries"])
                </h1>

                <div class="w-100 h-100 d-flex flex-column justify-content-between overflow-y-auto overflow-x-hidden">
                    <div class="h-100 overflow-y-auto overflow-x-hidden">
                        <div class="d-md-flex justify-content-md-center mt-2">
                            @if (this.HasImdbId())
                            {
                                <RadzenLink Path="@String.Format(this.Loc["Link.ImdbUrlFormat"], this.FormModel.ImdbId)"
                                            Text="@this.Loc["Link.Imdb"]" target="_blank"
                                            class="@($"{(this.HasRottenTomatoesId() ? "me-md-2" : "")}")" />
                            }

                            @if (this.HasRottenTomatoesId())
                            {
                                <RadzenLink Path="@String.Format(
                                                this.Loc["Link.RottenTomatoesUrlFormat"],
                                                this.FormModel.RottenTomatoesId)"
                                            Text="@this.Loc["Link.RottenTomatoes"]" target="_blank"
                                            class="@($"{(this.HasImdbId() ? "me-md-2" : "")}")" />
                            }
                        </div>

                        <RadzenLabel Text="@this.Loc["SeriesForm.Titles"]" class="mt-2" />
                        <TitlesForm Titles="@this.FormModel.Titles" PropertyName="Titles" />

                        <RadzenLabel Text="@this.Loc["SeriesForm.OriginalTitles"]" class="mt-2" />
                        <TitlesForm Titles="@this.FormModel.OriginalTitles" PropertyName="OriginalTitles" />

                        <div class="row mt-2">
                            <div class="col-md pe-md-1">
                                <RadzenLabel Text="@this.Loc["SeriesForm.WatchStatus"]"
                                             Component="WatchStatusDropDown" />
                                <RadzenDropDown @bind-Value="@this.FormModel.WatchStatus" Data="@this.AllWatchStatuses"
                                                AllowVirtualization="false" AllowClear="false" AllowFiltering="false"
                                                Name="WatchStatusDropDown">
                                    <Template>
                                        @this.Loc[$"SeriesForm.WatchStatus.{context}"]
                                    </Template>
                                </RadzenDropDown>
                                <ErrorPresenter ErrorCode="Series.WatchStatus.*" Trigger="@(new
                                                    { this.FormModel.WatchStatus, this.FormModel.ReleaseStatus })" />
                            </div>

                            <div class="col-md ps-md-1">
                                <RadzenLabel Text="@this.Loc["SeriesForm.ReleaseStatus"]"
                                             Component="ReleaseStatusDropDown" />
                                <RadzenDropDown @bind-Value="@this.FormModel.ReleaseStatus" Name="ReleaseStatusDropDown"
                                                Data="@this.AllReleaseStatuses" AllowVirtualization="false"
                                                AllowClear="false" AllowFiltering="false">
                                    <Template>
                                        @this.Loc[$"SeriesForm.ReleaseStatus.{context}"]
                                    </Template>
                                </RadzenDropDown>
                            </div>
                        </div>

                        <RadzenLabel Text="@this.Loc["SeriesForm.Kind"]" Component="KindDropDown" class="mt-1" />
                        <RadzenDropDown @bind-Value="@this.FormModel.Kind" Data="@this.State.Value.AvailableKinds"
                                        AllowVirtualization="false" AllowClear="false" AllowFiltering="false"
                                        Name="KindDropDown" TextProperty="Name" class="w-100" />

                        <RadzenDataList WrapItems="true" Data="@this.FormModel.Components"
                                        class="overflow-visible w-100 mt-1">
                            <Template Context="component">
                                <div class="item-container d-flex flex-row justify-content-between border-bottom m-0 p-2"
                                     role="button" @onclick="() => this.OpenSeriesComponentForm(component)">
                                    <p class="m-0">@component.Title</p>
                                    <div class="d-flex flex-row">
                                        <p class="m-0">@component.Years</p>
                                        @if (this.FormModel.Components.Count > 1)
                                        {
                                            <div role="button" class="ms-1">
                                                <RadzenMenu>
                                                    <RadzenMenuItem>
                                                        @if (this.CanMoveUp(component))
                                                        {
                                                            <RadzenMenuItem Text="@this.Loc["SeriesForm.Component.Up"]"
                                                                            Click="@(e => this.MoveUp(component))"
                                                                            Icon="keyboard_arrow_up" />
                                                        }

                                                        @if (this.CanMoveDown(component))
                                                        {
                                                            <RadzenMenuItem Text="@this.Loc["SeriesForm.Component.Down"]"
                                                                            Click="@(e => this.MoveDown(component))"
                                                                            Icon="keyboard_arrow_down" />
                                                        }
                                                    </RadzenMenuItem>
                                                </RadzenMenu>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </Template>
                        </RadzenDataList>

                        <div class="d-flex justify-content-center">
                            <div class="mt-2" style="display: inline-grid; grid-template-columns: 1fr 1fr">
                                <RadzenButton Text="@this.Loc["SeriesForm.AddSeason"]" Click="@this.AddSeason"
                                              ButtonStyle="ButtonStyle.Secondary" class="d-inline-block me-1" />
                                <RadzenButton Text="@this.Loc["SeriesForm.AddSpecialEpisode"]"
                                              Click="@this.AddSpecialEpisode" ButtonStyle="ButtonStyle.Secondary"
                                              class="d-inline-block ms-1" />
                            </div>
                        </div>

                        <div>
                            <ErrorPresenter ErrorCode="Series.Seasons.*" />
                        </div>

                        <RadzenLabel Text="@this.Loc["SeriesForm.ImdbId"]" Component="ImdbIdTextBox" class="mt-2" />
                        <RadzenTextBox @bind-Value="@this.FormModel.ImdbId" Name="ImdbIdTextBox" class="w-100" />
                        <ErrorPresenter ErrorCode="Series.ImdbId.*" Trigger="@this.FormModel.ImdbId" />

                        <RadzenLabel Text="@this.Loc["SeriesForm.RottenTomatoesId"]" Component="RottenTomatoesTextBox"
                                     class="mt-2" />
                        <RadzenTextBox @bind-Value="@this.FormModel.RottenTomatoesId" Name="RottenTomatoesTextBox"
                                       class="w-100" />
                        <ErrorPresenter ErrorCode="Series.RottenTomatoesId.*"
                                        Trigger="@this.FormModel.RottenTomatoesId" />

                        <div class="d-flex justify-content-center">
                            <div class="mt-2" style="display: inline-grid; grid-template-columns: 1fr 1fr">
                                <RadzenButton Text="@this.Loc["SeriesForm.AddTitle"]"
                                          ButtonStyle="ButtonStyle.Secondary" class="d-inline-block me-1"
                                          Click="@(e => this.AddTitle(this.FormModel.Titles))" />
                                <RadzenButton Text="@this.Loc["SeriesForm.AddOriginalTitle"]"
                                              ButtonStyle="ButtonStyle.Secondary" class="d-inline-block ms-1"
                                              Click="@(e => this.AddTitle(this.FormModel.OriginalTitles))" />
                            </div>
                        </div>

                        @if (this.ListItem is not null)
                        {
                            <div class="d-flex justify-content-center my-4">
                                <RadzenButton Text="@this.Loc["Button.Delete"]" ButtonStyle="ButtonStyle.Danger"
                                              BusyText="@this.Loc["Button.Delete.Busy"]" Click="@this.Delete"
                                              IsBusy="@this.State.Value.Delete.IsInProgress" />
                            </div>
                        }
                    </div>

                    @if (this.State.Value.Create.Problem is not null)
                    {
                        <ApiProblemAlert Text="@this.Loc["SeriesForm.Problem.CreatingFailed"]" TryAgain="@this.OnSave"
                                         Problem="@this.State.Value.Create.Problem" Class="w-100" />
                    }

                    @if (this.State.Value.Update.Problem is not null)
                    {
                        <ApiProblemAlert Text="@this.Loc["SeriesForm.Problem.UpdatingFailed"]" TryAgain="@this.OnSave"
                                         Problem="@this.State.Value.Update.Problem" Class="w-100" />
                    }

                    @if (this.State.Value.Delete.Problem is not null)
                    {
                        <ApiProblemAlert Text="@this.Loc["SeriesForm.Problem.DeletingFailed"]"
                                         Problem="@this.State.Value.Delete.Problem" Class="w-100" />
                    }

                    <div class="d-flex flex-row my-2">
                        <RadzenButton Text="@this.Loc["Button.Save"]" BusyText="@this.Loc["Button.Save.Busy"]"
                                      ButtonStyle="ButtonStyle.Primary" IsBusy="@this.IsSaving"
                                      Click="@this.OnSave" class="me-1" />
                        <RadzenButton Text="@this.Loc["Button.Cancel"]" ButtonStyle="ButtonStyle.Secondary"
                                      Click="@this.OnCancel" class="ms-1" />
                    </div>
                </div>
            }
        </div>
    </CascadingValue>
</CascadingValue>
