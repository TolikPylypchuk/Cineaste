@page "/list/{handle}"
@inherits StatefulComponent<ListPageState>

<div class="d-flex row w-100 h-100">
    <div class="col-2 pe-0">
        <ListSidebar Handle="@this.Handle"
                     IsListLoaded="this.State.Value.IsLoaded && this.State.Value.Problem is null" />
    </div>

    <div class="col-8 d-flex flex-column align-items-center h-100">
        @if (this.State.Value.IsLoading)
        {
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="w-25 mt-4" />
        } else if (this.State.Value.Problem is not null)
        {
            <ApiProblemAlert Text="@this.Loc["ListPage.Problem.LoadingListFailed"]" Problem="@this.State.Value.Problem"
                             TryAgain="@this.FetchList" Class="w-50 mt-3" />
        } else
        {
            <h1 class="display-5 mt-md-1 mt-1 flex-shrink-0">@this.State.Value.Name</h1>

            var selectedItem = this.State.Value.SelectedItem;

            <RadzenDataList WrapItems="true" Data="@this.State.Value.Container.Items" TItem="ListItemModel"
                            class="overflow-auto w-100 h-100">
                <Template Context="item">
                    <div role="button" @onclick="@(() => this.SelectItem(item))" style="@($"color: {item.Color};")"
                         class="@($"list-item-container border-bottom {(item == selectedItem ? "bg-light" : "")}")">
                        <div class="d-flex flex-row flex-fill align-items-center">
                            <p class="list-item item-number text-start m-0">@item.DisplayNumber</p>
                            <p class="list-item item-title text-center m-0">@item.Title</p>
                            <p class="list-item item-title text-center m-0">@item.OriginalTitle</p>
                            <p class="list-item item-years text-end m-0">@item.Years</p>
                        </div>
                    </div>
                </Template>
            </RadzenDataList>
        }
    </div>

    <div class="col-2 p-0 h-100">
        @if (this.State.Value.IsLoaded && this.State.Value.Problem is null)
        {
            @switch (this.State.Value.SelectionMode)
            {
                case ListPageSelectionMode.None:
                    <ListActionsPanel CreateMovie="@this.CreateMovie" CreateSeries="@this.CreateSeries" />
                    break;
                case ListPageSelectionMode.Movie:
                    <MovieForm ListId="@this.State.Value.Id" ListItem="@this.State.Value.SelectedItem"
                               Close="@this.OnItemClosed" />
                    break;
                case ListPageSelectionMode.Series:
                    <SeriesForm ListId="@this.State.Value.Id" ListItem="@this.State.Value.SelectedItem"
                                Close="@this.OnItemClosed" />
                    break;
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public string Handle { get; set; } = String.Empty;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        this.PageNavigator.PageChanged += this.OnPageChanged;

        if (!this.State.Value.IsLoaded)
        {
            this.FetchList();
        }
    }

    protected override void Dispose(bool disposing) =>
        this.PageNavigator.PageChanged -= this.OnPageChanged;

    private void FetchList() =>
        this.Dispatcher.Dispatch(new FetchListAction(this.Handle));

    private void SelectItem(ListItemModel item) =>
        this.Dispatcher.Dispatch(new SelectItemAction(
            item,
            item.Type switch
            {
                ListItemType.Movie => this.State.Value.AvailableMovieKinds,
                ListItemType.Series => this.State.Value.AvailableSeriesKinds,
                _ => ImmutableList.Create<ListKindModel>()
            }));

    private void CreateMovie() =>
        this.Dispatcher.Dispatch(new StartCreatingMovieAction(this.State.Value.AvailableMovieKinds));

    private void CreateSeries() =>
        this.Dispatcher.Dispatch(new StartCreatingSeriesAction(this.State.Value.AvailableSeriesKinds));

    private void OnItemClosed() =>
        this.Dispatcher.Dispatch(new CloseItemAction());

    private void OnPageChanged(object? sender, LocationChangedEventArgs e)
    {
        if (!e.Location.Contains($"/list/{this.Handle}"))
        {
            this.Dispatcher.Dispatch(new ResetListPageAction());
        }
    }
}
