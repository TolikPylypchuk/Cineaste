@page "/list/{handle}"
@inherits FluxorComponent
@inject IState<ListPageState> State
@inject IDispatcher Dispatcher
@inject IPageNavigator PageNavigator

<div class="d-flex row w-100 h-100">
    <div class="col-2">
        <ListSidebar Handle="@this.Handle" />
    </div>

    <div class="col-8 d-flex flex-column align-items-center h-100">
        @if (this.State.Value.IsLoading)
        {
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="w-25 mt-4" />
        } else if (this.State.Value.Problem is not null)
        {
            <ApiProblemAlert Text="Loading the list has failed" Problem="this.State.Value.Problem" Class="w-50 mt-3"
                             TryAgain="this.FetchList" />
        } else
        {
            <h1 class="display-5 mt-md-1 mt-1 flex-shrink-0">@this.State.Value.Name</h1>

            <RadzenDataList WrapItems="true" Data="@this.State.Value.Items" TItem="ListItemModel"
                            class="overflow-auto h-100">
                <Template Context="item">
                    <div role="button" class="container border-bottom"
                            style=@($"border: none; border-radius: 0; color: {item.Color};")>
                        <div class="d-flex flex-row align-items-center">
                            <p class="list-item text-start m-0" style="width: 50px">
                                @item.DisplayNumber
                            </p>

                            <p class="list-item text-center m-0" style="width: calc((100% - 175px) / 2)">
                                @item.Title
                            </p>

                            <p class="list-item text-center m-0" style="width: calc((100% - 175px) / 2)">
                                @item.OriginalTitle
                            </p>

                            <p class="list-item text-end m-0" style="width: 125px">
                                @item.Years
                            </p>
                        </div>
                    </div>
                </Template>
            </RadzenDataList>
        }
    </div>

    <div class="col-2 h-100">
        @if (this.State.Value.SelectedItem is null)
        {
            <ListActionsPanel />
        }
    </div>
</div>

@code {
    [Parameter]
    public string Handle { get; set; } = String.Empty;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        this.PageNavigator.PageChanged += this.OnPageChanged;

        if (!this.State.Value.IsLoaded)
        {
            this.FetchList();
        }
    }

    protected override void Dispose(bool disposing) =>
        this.PageNavigator.PageChanged -= this.OnPageChanged;

    private void FetchList() =>
        this.Dispatcher.Dispatch(new FetchListAction(this.Handle));

    private void OnPageChanged(object? sender, LocationChangedEventArgs e)
    {
        if (!e.Location.Contains($"/list/{this.Handle}"))
        {
            this.Dispatcher.Dispatch(new ResetListPageAction());
        }
    }
}
