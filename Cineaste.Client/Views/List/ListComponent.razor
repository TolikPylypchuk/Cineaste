@inherits StatefulComponent<ListPageState>

<div class="container">
    @if (this.State.Value.IsLoading)
    {
        <FluentProgressRing Class="loading-circle" />
    } else if (this.State.Value.Problem is not null)
    {
        <ApiProblemAlert Text="ListComponent.Problem.LoadingListFailed" Problem="@this.State.Value.Problem"
                         TryAgain="@this.FetchList" Class="problem-alert" />
    } else
    {
        <h1 class="list-name">@this.State.Value.Name</h1>

        var selectedItem = this.State.Value.SelectedItem;

        <FluentDataGrid TGridItem="ListItemModel" RowsData="@this.State.Value.Container.Items.AsQueryable()"
                        GenerateHeader="GenerateHeaderOption.Sticky" Virtualize="true" Class="list"
                        GridTemplateColumns="48px calc((100% - 120px) / 2) calc((100% - 120px) / 2) 72px"
                        RowClass="@(item => $"{(item == selectedItem ? "selected-row" : "")}")"
                        RowsDataKey="@(item => item.Id)" RowsDataSize="56">
            <TemplateColumn Context="item" Title="@this.Loc["ListComponent.List.Number"]"
                            Align="Align.Start" Sortable="false">
                <div class="cell-content number" style="@($"--cell-color: {item?.Color}")"
                     @onclick="@(() => this.SelectItem(item))">
                    @item?.DisplayNumber
                </div>
            </TemplateColumn>
            <TemplateColumn Context="item" Title="@this.Loc["ListComponent.List.Title"]"
                            Align="Align.Center" Sortable="false">
                <div class="cell-content title" style="@($"--cell-color: {item?.Color}")"
                     @onclick="@(() => this.SelectItem(item))">
                    @item?.Title
                </div>
            </TemplateColumn>
            <TemplateColumn Context="item" Title="@this.Loc["ListComponent.List.OriginalTitle"]"
                            Align="Align.Center" Sortable="false">
                <div class="cell-content title" style="@($"--cell-color: {item?.Color}")"
                     @onclick="@(() => this.SelectItem(item))">
                    @item?.OriginalTitle
                </div>
            </TemplateColumn>
            <TemplateColumn Context="item" Title="@this.Loc["ListComponent.List.Year"]"
                            Align="Align.End" Sortable="false">
                <div class="cell-content year" style="@($"--cell-color: {item?.Color}")"
                     @onclick="@(() => this.SelectItem(item))">
                    @if (item?.StartYear == item?.EndYear)
                    {
                        @item?.StartYear
                    } else
                    {
                        @item?.StartYear
                        <br />
                        @item?.EndYear
                    }
                </div>
            </TemplateColumn>
        </FluentDataGrid>
    }
</div>

@code {
    [Parameter]
    public EventCallback<ListItemModel> ItemSelected { get; set; }

    [Parameter]
    public required Action FetchList { get; set; }

    public async Task SelectItem(ListItemModel? item)
    {
        if (item is not null && item != this.State.Value.SelectedItem)
        {
            await this.ItemSelected.InvokeAsync(item);
        }
    }
}
