// <auto-generated />
using System;
using Cineaste.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cineaste.Persistence.Migrations
{
    [DbContext(typeof(CineasteDbContext))]
    [Migration("20220512203015_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cineaste.Core.Domain.ListConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultSeasonOriginalTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultSeasonTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ListConfiguration");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImdbId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWatched")
                        .HasColumnType("bit");

                    b.Property<Guid>("KindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RottenTomatoesLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KindId");

                    b.ToTable("Movies");

                    b.HasCheckConstraint("CH_Movies_YearPositive", "Year > 0");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.MovieKind", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NotReleasedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotWatchedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WatchedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MovieKinds");

                    b.HasCheckConstraint("CH_MovieKinds_NameNotEmpty", "Name <> ''");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.SeriesKind", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NotReleasedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotWatchedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WatchedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SeriesKinds");

                    b.HasCheckConstraint("CH_SeriesKinds_NameNotEmpty", "Name <> ''");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApplicableToMovies")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApplicableToSeries")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Category")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasCheckConstraint("CH_Tag_CategoryNotEmpty", "Category <> ''");

                    b.HasCheckConstraint("CH_Tag_NameNotEmpty", "Name <> ''");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.TagImplication", b =>
                {
                    b.Property<Guid>("ImpliedTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImplyingTagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImpliedTagId", "ImplyingTagId");

                    b.HasIndex("ImplyingTagId");

                    b.ToTable("TagImplications", (string)null);
                });

            modelBuilder.Entity("Cineaste.Core.Domain.ListConfiguration", b =>
                {
                    b.OwnsOne("Cineaste.Core.Domain.ListSortingConfiguration", "SortingConfiguration", b1 =>
                        {
                            b1.Property<Guid>("ListConfigurationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DefaultFirstSortDirection")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DefaultFirstSortDirection");

                            b1.Property<string>("DefaultFirstSortOrder")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DefaultFirstSortOrder");

                            b1.Property<string>("DefaultSecondSortDirection")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DefaultSecondSortDirection");

                            b1.Property<string>("DefaultSecondSortOrder")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DefaultSecondSortOrder");

                            b1.HasKey("ListConfigurationId");

                            b1.ToTable("ListConfiguration");

                            b1.WithOwner()
                                .HasForeignKey("ListConfigurationId");
                        });

                    b.Navigation("SortingConfiguration")
                        .IsRequired();
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Movie", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.MovieKind", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Cineaste.Core.Domain.Poster", "Poster", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("RawData")
                                .IsRequired()
                                .HasColumnType("varbinary(max)")
                                .HasColumnName("Poster");

                            b1.HasKey("MovieId");

                            b1.ToTable("Movies");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsMany("Cineaste.Core.Domain.TagContainer", "Tags", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<Guid>("TagId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("MovieId", "Id");

                            b1.HasIndex("TagId");

                            b1.ToTable("MovieTags", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId");

                            b1.HasOne("Cineaste.Core.Domain.Tag", "Tag")
                                .WithMany()
                                .HasForeignKey("TagId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Tag");
                        });

                    b.OwnsMany("Cineaste.Core.Domain.Title", "Titles", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<bool>("IsOriginal")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Priority")
                                .HasColumnType("int");

                            b1.HasKey("MovieId", "Id");

                            b1.ToTable("MovieTitles", (string)null);

                            b1.HasCheckConstraint("CH_MovieTitles_NameNotEmpty", "Name <> ''");

                            b1.HasCheckConstraint("CH_MovieTitles_PriorityPositive", "Priority > 0");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.Navigation("Kind");

                    b.Navigation("Poster");

                    b.Navigation("Tags");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.TagImplication", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("ImpliedTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cineaste.Core.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("ImplyingTagId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
