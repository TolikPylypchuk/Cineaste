@page "/list"
@inherits StatefulComponent<ListPageState>

<div class="container">
    <div class="nav-menu-container">
        <ListNavMenu />
    </div>

    <div class="list-container">
        <ListComponent ItemSelected="@this.SelectItem" FetchList="@this.FetchList" />
    </div>

    <div class="sidebar-container list-sidebar">
        @if (this.State.Value.IsLoaded && this.State.Value.Problem is null)
        {
            @switch (this.State.Value.SelectionMode)
            {
                case ListPageSelectionMode.None:
                    <ListActionsPanel CreateMovie="@this.CreateMovie" CreateSeries="@this.CreateSeries" />
                    break;
                case ListPageSelectionMode.Movie:
                    <MovieForm
                        ListId="@this.State.Value.Id"
                        ListItem="@this.State.Value.SelectedItem"
                        Close="@this.OnItemClosed"
                    />
                    break;
                case ListPageSelectionMode.Series:
                    <SeriesForm
                        ListId="@this.State.Value.Id"
                        ListItem="@this.State.Value.SelectedItem"
                        Close="@this.OnItemClosed"
                    />
                    break;
                case ListPageSelectionMode.Franchise:
                    <FranchiseForm
                        ListId="@this.State.Value.Id"
                        ListItem="@this.State.Value.SelectedItem"
                        Close="@this.OnItemClosed"
                    />
                    break;
            }
        }
    </div>
</div>

@code {
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (!this.State.Value.IsLoaded)
        {
            this.FetchList();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            this.SubscribeToAction<GoToFranchiseAction>(action => this.OnGoToFranchise(action.FranchiseId));

            this.SubscribeToAction<GoToFranchiseComponentAction>(action =>
                this.OnGoToFranchiseComponent(action.FranchiseId, action.SequenceNumber));
        }
    }

    private void FetchList() =>
        this.Dispatcher.Dispatch(new FetchListAction());

    private void SelectItem(ListItemModel item)
    {
        this.Dispatcher.Dispatch(new SelectItemAction(
            item, this.GetKindsForItemType(item.Type), this.State.Value.ListConfiguration));
    }

    private void CreateMovie() =>
        this.Dispatcher.Dispatch(new StartCreatingMovieAction(this.State.Value.AvailableMovieKinds));

    private void CreateSeries() =>
        this.Dispatcher.Dispatch(new StartCreatingSeriesAction(
            this.State.Value.AvailableSeriesKinds, this.State.Value.ListConfiguration));

    private void OnItemClosed() =>
        this.Dispatcher.Dispatch(new CloseItemAction());

    private void OnGoToFranchise(Guid franchiseId)
    { }

    private void OnGoToFranchiseComponent(Guid franchiseId, int sequenceNumber)
    { }

    private ImmutableList<ListKindModel> GetKindsForItemType(ListItemType type) =>
        type switch
        {
            ListItemType.Movie => this.State.Value.AvailableMovieKinds,
            ListItemType.Series => this.State.Value.AvailableSeriesKinds,
            _ => this.State.Value.AvailableMovieKinds.AddRange(this.State.Value.AvailableSeriesKinds)
        };
}
