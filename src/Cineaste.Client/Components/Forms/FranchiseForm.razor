@inherits CineasteForm<FranchiseFormModel, FranchiseRequest, FranchiseModel, FranchiseFormState>

<FormParamsProvider For="this">
    <div class="container list-sidebar">
        <div class="form-header">
            @if (!this.FormModel.IsNew && !this.FormModel.HasChanges && this.FormModel.ParentFranchiseId is not null)
            {
                <MudIconButton
                    Icon="@Icons.Material.Filled.KeyboardArrowUp"
                    Size="Size.Small"
                    @onclick="this.GoToParentFranchise"
                    aria-label="@this.Loc["AriaLabel.Up"]"
                />

                <div class="go-to-other-components-container">
                    <MudIconButton
                        Icon="@Icons.Material.Filled.KeyboardArrowLeft"
                        Size="Size.Small"
                        Class="@(this.FormModel.IsFirst ? "invisible" : null)"
                        @onclick="this.GoToPreviousComponent"
                        aria-hidden="@this.FormModel.IsFirst"
                        aria-label="@this.Loc["AriaLabel.Previous"]"
                    />

                    <MudIconButton
                        Icon="@Icons.Material.Filled.KeyboardArrowRight"
                        Size="Size.Small"
                        Class="@(this.FormModel.IsLast ? "invisible" : null)"
                        @onclick="this.GoToNextComponent"
                        aria-hidden="@this.FormModel.IsLast"
                        aria-label="@this.Loc["AriaLabel.Next"]"
                    />
                </div>
            } else
            {
                <div></div>
                <div></div>
            }

            <MudIconButton
                Icon="@Icons.Material.Filled.Close"
                Size="Size.Small"
                @onclick="this.Close"
                aria-label="@this.Loc["AriaLabel.Close"]"
            />
        </div>

        @if (this.State.Value.Fetch.IsInProgress)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Class="loading-circle" />
        } else if (this.State.Value.Fetch.Problem is not null)
        {
            <ApiProblemAlert
                Problem="@this.State.Value.Fetch.Problem"
                Text="FranchiseForm.Problem.LoadingFailed"
                TryAgain="@this.FetchFranchise"
                Class="problem-alert main"
            />
        } else
        {
            <div class="form-container list-sidebar">
                <h2 class="form-title">
                    @(!String.IsNullOrEmpty(this.FormTitle) || this.ListItem is not null
                        ? this.FormTitle
                        : this.Loc["FranchiseForm.NewFranchise"])
                </h2>

                <div class="form">
                    <div class="form-checkboxes">
                        <MudCheckBox
                            @bind-Value="this.FormModel.ShowTitles"
                            Color="Color.Primary"
                            Size="Size.Small"
                            Dense="true"
                            Disabled="this.FormModel.Components.Count == 0"
                        >
                            @this.Loc["FranchiseForm.ShowTitles"]
                        </MudCheckBox>
                        <MudCheckBox
                            @bind-Value="this.FormModel.IsLooselyConnected"
                            Color="Color.Primary"
                            Size="Size.Small"
                            Dense="true"
                        >
                            @this.Loc["FranchiseForm.LooselyConnected"]
                        </MudCheckBox>
                        <MudCheckBox
                            @bind-Value="this.FormModel.ContinueNumbering"
                            Color="Color.Primary"
                            Size="Size.Small"
                            Dense="true"
                        >
                            @this.Loc["FranchiseForm.ContinueNumbering"]
                        </MudCheckBox>
                    </div>

                    <TitlesForm
                        Titles="@this.FormModel.Titles"
                        Label="FranchiseForm.Title"
                        PropertyName="@nameof(this.FormModel.Titles)"
                    />

                    <TitlesForm
                        Titles="@this.FormModel.OriginalTitles"
                        Label="FranchiseForm.OriginalTitle"
                        PropertyName="@nameof(this.FormModel.OriginalTitles)"
                    />

                    <div class="form-kind">
                        <div>
                            <MudSelect
                                T="FranchiseKindSource"
                                Value="this.FormModel.KindSource"
                                ValueChanged="this.OnKindSourceValueChanged"
                                Label="@this.Loc["FranchiseForm.KindSource"]"
                                Class="form-field"
                            >
                                @foreach (var value in Enum.GetValues<FranchiseKindSource>())
                                {
                                    <MudSelectItem Value="value">
                                        @this.Loc[$"FranchiseKindSource.{value}"]
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </div>

                        <div>
                            @switch (this.FormModel.KindSource)
                            {
                                case FranchiseKindSource.Movie:
                                    <MudSelect
                                        @bind-Value="this.FormModel.Kind"
                                        Label="@this.Loc["FranchiseForm.Kind"]"
                                        Class="form-field"
                                    >
                                        @foreach (var kind in this.AvailableMovieKinds)
                                        {
                                            <MudSelectItem Value="kind">
                                                @kind.Name
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                    break;
                                case FranchiseKindSource.Series:
                                    <MudSelect
                                        @bind-Value="this.FormModel.Kind"
                                        Label="@this.Loc["FranchiseForm.Kind"]"
                                        Class="form-field"
                                    >
                                        @foreach (var kind in this.AvailableSeriesKinds)
                                        {
                                            <MudSelectItem Value="kind">
                                                @kind.Name
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                    break;
                            }
                        </div>
                    </div>

                    <MudDataGrid
                        @ref="this.ComponentGrid"
                        Items="this.FormModel.Components"
                        SelectedItemChanged="@((FranchiseFormComponent component) => this.OpenComponentForm(component))"
                        HeaderClass="no-header"
                        SortMode="@SortMode.None"
                        RowClass="@(!this.FormModel.HasChanges ? "component-row" : "component-row inactive")"
                        Filterable="false"
                        Groupable="false"
                        Dense="true"
                        Hover="true"
                        Class="components-grid"
                    >
                        <Columns>
                            <TemplateColumn>
                                <CellTemplate>
                                    @if (context.Item.DisplayNumber is int number)
                                    {
                                        @if (this.FormModel.IsLooselyConnected)
                                        {
                                            @($"({number})")
                                        } else
                                        {
                                            @number
                                        }
                                    } else
                                    {
                                        @("-")
                                    }
                                </CellTemplate>
                            </TemplateColumn>

                            <PropertyColumn Property="@(c => c.Title)" />

                            <TemplateColumn>
                                <CellTemplate>
                                    @if (context.Item.StartYear is int startYear && context.Item.EndYear is int endYear)
                                    {
                                        @if (startYear == endYear)
                                        {
                                            @startYear
                                        } else
                                        {
                                            @($"{startYear}-{endYear}")
                                        }
                                    }
                                </CellTemplate>
                            </TemplateColumn>

                            <TemplateColumn>
                                <CellTemplate>
                                    <MudMenu
                                        Icon="@Icons.Material.Filled.MoreVert"
                                        Size="Size.Small"
                                        aria-label="@this.Loc["AriaLabel.More"]"
                                    >
                                        @if (this.CanMoveUp(context.Item))
                                        {
                                            <MudMenuItem
                                                Icon="@Icons.Material.Filled.KeyboardArrowUp"
                                                @onclick="@(() => this.MoveUp(context.Item))"
                                            >
                                                @this.Loc["FranchiseForm.Component.Up"]
                                            </MudMenuItem>
                                        }

                                        @if (this.CanMoveDown(context.Item))
                                        {
                                            <MudMenuItem
                                                Icon="@Icons.Material.Filled.KeyboardArrowDown"
                                                @onclick="@(() => this.MoveDown(context.Item))"
                                            >
                                                @this.Loc["FranchiseForm.Component.Down"]
                                            </MudMenuItem>
                                        }

                                        <MudMenuItem
                                            Icon="@Icons.Material.Filled.ContentCut"
                                            @onclick="@(() => this.Detach(context.Item))"
                                        >
                                            @this.Loc["FranchiseForm.Component.Detach"]
                                        </MudMenuItem>
                                    </MudMenu>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>

                    @if (!(this.FormModel.IsNew || this.FormModel.HasChanges))
                    {
                        <div class="add-movie-series-container">
                            <MudButton
                                Variant="Variant.Text"
                                Size="Size.Small"
                                @onclick="@this.StartAddingMovie"
                            >
                                @this.Loc["FranchiseForm.AddMovie"]
                            </MudButton>

                            <MudButton
                                Variant="Variant.Text"
                                Size="Size.Small"
                                @onclick="@this.StartAddingSeries"
                            >
                                @this.Loc["FranchiseForm.AddSeries"]
                            </MudButton>
                        </div>

                        <div class="add-franchise-container">
                            <MudButton
                                Variant="Variant.Text"
                                Size="Size.Small"
                                @onclick="@this.StartAddingFranchise"
                            >
                                @this.Loc["FranchiseForm.AddFranchise"]
                            </MudButton>
                        </div>

                        <div class="go-to-franchise-container">
                            @if (this.FormModel.ParentFranchiseId is not null)
                            {
                                <MudButton
                                    Variant="Variant.Text"
                                    Size="Size.Small"
                                    @onclick="@this.GoToParentFranchise"
                                >
                                    @this.Loc["FranchiseForm.GoToFranchise"]
                                </MudButton>
                            } else
                            {
                                <MudButton
                                    Variant="Variant.Text"
                                    Size="Size.Small"
                                    @onclick="@this.StartAddingParentFranchise"
                                >
                                    @this.Loc["FranchiseForm.StartFranchise"]
                                </MudButton>
                            }
                        </div>
                    }

                    @if (!this.FormModel.IsNew)
                    {
                        <div class="remove-container">
                            <MudButton
                                Variant="Variant.Filled"
                                Color="Color.Secondary"
                                Disabled="@this.State.Value.Remove.IsInProgress"
                                @onclick="@this.Remove"
                            >
                                @this.Loc[this.State.Value.Remove.IsInProgress ? "Button.Remove.Busy" : "Button.Remove"]
                            </MudButton>
                        </div>
                    }
                </div>

                @if (this.State.Value.Add.Problem is not null)
                {
                    <ApiProblemAlert
                        Problem="@this.State.Value.Add.Problem"
                        Text="FranchiseForm.Problem.AddingFailed"
                        TryAgain="@this.Save"
                        Class="problem-alert"
                    />
                }

                @if (this.State.Value.Update.Problem is not null)
                {
                    <ApiProblemAlert
                        Problem="@this.State.Value.Update.Problem"
                        Text="FranchiseForm.Problem.UpdatingFailed"
                        TryAgain="@this.Save"
                        Class="problem-alert"
                    />
                }

                @if (this.State.Value.Remove.Problem is not null)
                {
                    <ApiProblemAlert
                        Problem="@this.State.Value.Remove.Problem"
                        Text="FranchiseForm.Problem.RemovingFailed"
                        TryAgain="@this.Remove"
                        Class="problem-alert"
                    />
                }

                <div class="@($"form-actions{(this.FormModel.HasChanges ? "" : " hidden")}")">
                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        Disabled="@this.IsSaving"
                        @onclick="@this.Save"
                    >
                        @this.Loc[this.IsSaving ? "Button.Save.Busy" : "Button.Save"]
                    </MudButton>

                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Surface"
                        Disabled="@this.IsSaving"
                        @onclick="@this.Cancel"
                    >
                        @this.Loc["Button.Cancel"]
                    </MudButton>
                </div>
            </div>
        }
    </div>
</FormParamsProvider>
