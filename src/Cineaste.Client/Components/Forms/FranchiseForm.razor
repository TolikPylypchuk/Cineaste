@inherits CineasteForm<FranchiseFormModel, FranchiseRequest, FranchiseModel, FranchiseFormState>

<FormParamsProvider For="this">
    <div class="container list-sidebar">
        <div class="form-header">
            @if (!this.FormModel.HasChanges && this.FormModel.ParentFranchiseId is not null)
            {
                <MudIconButton
                    Icon="@Icons.Material.Filled.KeyboardArrowUp"
                    Size="Size.Small"
                    @onclick="this.GoToParentFranchise"
                    aria-label="@this.Loc["AriaLabel.Up"]"
                />

                <div class="go-to-other-components-container">
                    <MudIconButton
                        Icon="@Icons.Material.Filled.KeyboardArrowLeft"
                        Size="Size.Small"
                        Class="@(this.FormModel.IsFirst ? "invisible" : null)"
                        @onclick="this.GoToPreviousComponent"
                        aria-hidden="@this.FormModel.IsFirst"
                        aria-label="@this.Loc["AriaLabel.Previous"]"
                    />

                    <MudIconButton
                        Icon="@Icons.Material.Filled.KeyboardArrowRight"
                        Size="Size.Small"
                        Class="@(this.FormModel.IsLast ? "invisible" : null)"
                        @onclick="this.GoToNextComponent"
                        aria-hidden="@this.FormModel.IsLast"
                        aria-label="@this.Loc["AriaLabel.Next"]"
                    />
                </div>
            } else
            {
                <div></div>
                <div></div>
            }

            <MudIconButton
                Icon="@Icons.Material.Filled.Close"
                Size="Size.Small"
                @onclick="this.Close"
                aria-label="@this.Loc["AriaLabel.Close"]"
            />
        </div>

        @if (this.State.Value.Fetch.IsInProgress)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Class="loading-circle" />
        } else if (this.State.Value.Fetch.Problem is not null)
        {
            <ApiProblemAlert
                Problem="@this.State.Value.Fetch.Problem"
                Text="FranchiseForm.Problem.LoadingFailed"
                TryAgain="@this.FetchFranchise"
                Class="problem-alert main"
            />
        } else
        {
            <div class="form-container list-sidebar">
                <h2 class="form-title">
                    @(!String.IsNullOrEmpty(this.FormTitle) || this.ListItem is not null
                        ? this.FormTitle
                        : this.Loc["FranchiseForm.NewFranchise"])
                </h2>

                <div class="form">
                    <div class="form-checkboxes">
                        <MudCheckBox
                            @bind-Value="this.FormModel.ShowTitles"
                            Color="Color.Primary"
                            Size="Size.Small"
                            Dense="true"
                        >
                            @this.Loc["FranchiseForm.ShowTitles"]
                        </MudCheckBox>
                        <MudCheckBox
                            @bind-Value="this.FormModel.IsLooselyConnected"
                            Color="Color.Primary"
                            Size="Size.Small"
                            Dense="true"
                        >
                            @this.Loc["FranchiseForm.LooselyConnected"]
                        </MudCheckBox>
                        <MudCheckBox
                            @bind-Value="this.FormModel.ContinueNumbering"
                            Color="Color.Primary"
                            Size="Size.Small"
                            Dense="true"
                        >
                            @this.Loc["FranchiseForm.ContinueNumbering"]
                        </MudCheckBox>
                    </div>

                    @if (this.FormModel.ShowTitles)
                    {
                        <TitlesForm
                            Titles="@this.FormModel.Titles"
                            Label="FranchiseForm.Title"
                            PropertyName="@nameof(this.FormModel.Titles)"
                        />

                        <TitlesForm
                            Titles="@this.FormModel.OriginalTitles"
                            Label="FranchiseForm.OriginalTitle"
                            PropertyName="@nameof(this.FormModel.OriginalTitles)"
                        />
                    }

                    @if (this.ListItem is not null)
                    {
                        <div class="delete-container">
                            <MudButton
                                Variant="Variant.Filled"
                                Color="Color.Secondary"
                                Disabled="@this.State.Value.Remove.IsInProgress"
                                @onclick="@this.Delete"
                            >
                                @this.Loc[this.State.Value.Remove.IsInProgress ? "Button.Delete.Busy" : "Button.Delete"]
                            </MudButton>
                        </div>
                    }
                </div>

                @if (this.State.Value.Add.Problem is not null)
                {
                    <ApiProblemAlert
                        Problem="@this.State.Value.Add.Problem"
                        Text="FranchiseForm.Problem.CreatingFailed"
                        TryAgain="@this.Save"
                        Class="problem-alert"
                    />
                }

                @if (this.State.Value.Update.Problem is not null)
                {
                    <ApiProblemAlert
                        Problem="@this.State.Value.Update.Problem"
                        Text="FranchiseForm.Problem.UpdatingFailed"
                        TryAgain="@this.Save"
                        Class="problem-alert"
                    />
                }

                @if (this.State.Value.Remove.Problem is not null)
                {
                    <ApiProblemAlert
                        Problem="@this.State.Value.Remove.Problem"
                        Text="FranchiseForm.Problem.DeletingFailed"
                        TryAgain="@this.Delete"
                        Class="problem-alert"
                    />
                }

                <div class="@($"form-actions{(this.FormModel.HasChanges ? "" : " hidden")}")">
                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        Disabled="@this.IsSaving"
                        @onclick="@this.Save"
                    >
                        @this.Loc[this.IsSaving ? "Button.Save.Busy" : "Button.Save"]
                    </MudButton>

                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Surface"
                        Disabled="@this.IsSaving"
                        @onclick="@this.Cancel"
                    >
                        @this.Loc["Button.Cancel"]
                    </MudButton>
                </div>
            </div>
        }
    </div>
</FormParamsProvider>
