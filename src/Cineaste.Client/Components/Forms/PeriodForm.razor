@inherits CineasteForm<PeriodFormModel, PeriodRequest, PeriodModel, SeriesFormState>

<FormParamsProvider For="this">
    <div>
        <MudDatePicker
            Date="this.FormModel.StartDate"
            DateChanged="@(date => this.OnStartDateChanged(date))"
            Label="@(this.Loc[
                $"PeriodForm.{(!this.FormModel.IsSingleDayRelease ? "StartMonthYear" : "ReleaseMonthYear")}"])"
            DateFormat="@this.Loc["PeriodForm.MonthYearFormat"]"
            MinDate="@(new DateTime(Constants.MinYear, 1, 1))"
            ShowToolbar="false"
            OpenTo="OpenTo.Month"
            FixDay="1"
            Adornment="Adornment.None"
            Class="form-field"
        />
    </div>

    @if (!this.FormModel.IsSingleDayRelease)
    {
        <div>
            <MudDatePicker
                Date="this.FormModel.EndDate"
                DateChanged="@(date => this.OnEndDateChanged(date))"
                Label="@this.Loc["PeriodForm.EndMonthYear"]"
                DateFormat="@this.Loc["PeriodForm.MonthYearFormat"]"
                MinDate="@(new DateTime(Constants.MinYear, 1, 1))"
                ShowToolbar="false"
                OpenTo="OpenTo.Month"
                FixDay="1"
                Adornment="Adornment.None"
                Class="form-field"
            />
        </div>
    }

    <div>
        <ErrorPresenter ErrorCode="Period.Invalid" Trigger="@this.InvalidPeriodTrigger" />
    </div>

    <div class="episode-count-container">
        <div>
            <MudNumericField
                @bind-Value="this.FormModel.EpisodeCount"
                Label="@this.Loc["PeriodForm.EpisodeCount"]"
                Class="form-field"
            />

            <ErrorPresenter ErrorCode="Period.EpisodeCount.*" Trigger="@this.FormModel.EpisodeCount" />
        </div>

        <div>
            <div>
                <MudCheckBox
                    @bind-Value="@this.FormModel.IsSingleDayRelease"
                    Color="Color.Primary"
                    Disabled="@(!this.CanChangeIsSingleDayRelease)"
                    Size="Size.Small"
                    Dense="true"
                >
                    @this.Loc["PeriodForm.IsSingleDayRelease"]
                </MudCheckBox>

                <ErrorPresenter
                    ErrorCode="Period.IsSingleDayRelease.*"
                    Trigger="@(new { this.FormModel.IsSingleDayRelease, this.FormModel.EpisodeCount })"
                />
            </div>
        </div>
    </div>

    <div class="rotten-tomatoes-container">
        <div class="rotten-tomatoes">
            <MudTextField
                @bind-Value="@this.FormModel.RottenTomatoesId"
                Label="@this.Loc["PeriodForm.RottenTomatoesId"]"
                AutoGrow="true"
                Class="form-field"
            />

            <ErrorPresenter
                ErrorCode="Period.RottenTomatoesId.*"
                Trigger="@this.FormModel.RottenTomatoesId"
            />
        </div>

        @if (this.CanRemove)
        {
            <MudIconButton
                Icon="@Icons.Material.Filled.Close"
                Size="Size.Small"
                @onclick="this.Removed"
                aria-label="@this.Loc["AriaLabel.Remove"]"
            />
        }
    </div>
</FormParamsProvider>

@code {
    [Parameter]
    public override PeriodFormModel FormModel { get; set; } = null!;

    [Parameter]
    public bool CanRemove { get; set; }

    [Parameter]
    public EventCallback Changed { get; set; }

    [Parameter]
    public EventCallback Removed { get; set; }

    private bool CanChangeIsSingleDayRelease { get; set; }

    private object InvalidPeriodTrigger =>
        new
        {
            this.FormModel.StartMonth,
            this.FormModel.StartYear,
            this.FormModel.EndMonth,
            this.FormModel.EndYear
        };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this.SetCanChangeIsSingleDayRelease();
    }

    private async Task OnStartDateChanged(DateTime? date)
    {
        this.FormModel.StartDate = date;
        await this.OnPeriodChanged();
    }

    private async Task OnEndDateChanged(DateTime? date)
    {
        this.FormModel.EndDate = date;
        await this.OnPeriodChanged();
    }

    private async Task OnPeriodChanged()
    {
        this.SetCanChangeIsSingleDayRelease();
        await this.Changed.InvokeAsync();
    }

    private void SetCanChangeIsSingleDayRelease() =>
        this.CanChangeIsSingleDayRelease =
            this.FormModel.StartMonth == this.FormModel.EndMonth &&
            this.FormModel.StartYear == this.FormModel.EndYear;
}
