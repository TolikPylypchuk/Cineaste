@inherits CineasteForm<SeriesFormModel, SeriesRequest, SeriesModel, SeriesFormState>

<FormParamsProvider For="this">
    <div class="container list-sidebar">
        <div class="form-header">
            @if (!this.FormModel.HasChanges && this.FormModel.ParentFranchiseId is not null)
            {
                <MudIconButton
                    Icon="@Icons.Material.Filled.KeyboardArrowUp"
                    Size="Size.Small"
                    @onclick="this.GoToParentFranchise"
                    aria-label="@this.Loc["AriaLabel.Up"]"
                />

                <div class="go-to-other-components-container">
                    <MudIconButton
                        Icon="@Icons.Material.Filled.KeyboardArrowLeft"
                        Size="Size.Small"
                        Class="@(this.FormModel.IsFirst ? "invisible" : null)"
                        @onclick="this.GoToPreviousComponent"
                        aria-hidden="@this.FormModel.IsFirst"
                        aria-label="@this.Loc["AriaLabel.Previous"]"
                    />

                    <MudIconButton
                        Icon="@Icons.Material.Filled.KeyboardArrowRight"
                        Size="Size.Small"
                        Class="@(this.FormModel.IsLast ? "invisible" : null)"
                        @onclick="this.GoToNextComponent"
                        aria-hidden="@this.FormModel.IsLast"
                        aria-label="@this.Loc["AriaLabel.Next"]"
                    />
                </div>
            } else
            {
                <div></div>
                <div></div>
            }

            <MudIconButton
                Icon="@Icons.Material.Filled.Close"
                Size="Size.Small"
                @onclick="this.Close"
                aria-label="@this.Loc["AriaLabel.Close"]"
            />
        </div>

        @if (this.State.Value.Fetch.IsInProgress)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Class="loading-circle" />
        } else if (this.State.Value.Fetch.Problem is not null)
        {
            <ApiProblemAlert
                Problem="@this.State.Value.Fetch.Problem"
                Text="SeriesForm.Problem.LoadingFailed"
                TryAgain="@this.FetchSeries"
                Class="problem-alert main"
            />
        } else
        {
            <div class="form-container list-sidebar">
                <h2 class="form-title">
                    @(!String.IsNullOrEmpty(this.FormTitle) || this.ListItem is not null
                        ? this.FormTitle
                        : this.Loc["SeriesForm.NewSeries"])
                </h2>

                <div class="form">
                    <div class="form-links">
                        @if (this.HasImdbId())
                        {
                            string href = String.Format(this.Loc["Link.ImdbUrlFormat"], this.FormModel.ImdbId);

                            <MudLink Href="@href" Target="_blank">
                                @this.Loc["Link.Imdb"]
                            </MudLink>
                        }

                        @if (this.HasRottenTomatoesId())
                        {
                            string href = String.Format(
                                this.Loc["Link.RottenTomatoesUrlFormat"],
                                this.FormModel.RottenTomatoesId);

                            <MudLink Href="@href" Target="_blank">
                                @this.Loc["Link.RottenTomatoes"]
                            </MudLink>
                        }
                    </div>

                    <TitlesForm
                        Titles="@this.FormModel.Titles"
                        Label="SeriesForm.Title"
                        PropertyName="@nameof(this.FormModel.Titles)"
                    />

                    <TitlesForm
                        Titles="@this.FormModel.OriginalTitles"
                        Label="SeriesForm.OriginalTitle"
                        PropertyName="@nameof(this.FormModel.OriginalTitles)"
                    />

                    <div class="form-statuses">
                        <div>
                            <MudSelect
                                @bind-Value="this.FormModel.WatchStatus"
                                Label="@this.Loc["SeriesForm.WatchStatus"]"
                                Class="select form-field"
                            >
                                @foreach (var status in this.AllWatchStatuses)
                                {
                                    <MudSelectItem Value="status">
                                        @this.Loc[$"SeriesForm.WatchStatus.{status}"]
                                    </MudSelectItem>
                                }
                            </MudSelect>

                            <ErrorPresenter ErrorCode="Series.WatchStatus.*" Trigger="@this.StatusErrorTrigger" />
                        </div>

                        <div>
                            <MudSelect
                                @bind-Value="this.FormModel.ReleaseStatus"
                                Label="@this.Loc["SeriesForm.ReleaseStatus"]"
                                Class="select form-field"
                            >
                                @foreach (var status in this.AllReleaseStatuses)
                                {
                                    <MudSelectItem Value="status">
                                        @this.Loc[$"SeriesForm.ReleaseStatus.{status}"]
                                    </MudSelectItem>
                                }
                            </MudSelect>

                            <ErrorPresenter ErrorCode="Series.ReleaseStatus.*" Trigger="@this.StatusErrorTrigger" />
                        </div>
                    </div>

                    <div>
                        <MudSelect
                            @bind-Value="this.FormModel.Kind"
                            Label="@this.Loc["SeriesForm.Kind"]"
                            Class="kind-select form-field"
                        >
                            @foreach (var kind in this.State.Value.AvailableKinds)
                            {
                                <MudSelectItem Value="kind">
                                    @kind.Name
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </div>

                    <MudDataGrid
                        @ref="this.ComponentGrid"
                        Items="this.FormModel.Components"
                        SelectedItemChanged="@((ISeriesComponentFormModel component) =>
                            this.OpenSeriesComponentForm(component))"
                        HeaderClass="no-header"
                        SortMode="@SortMode.None"
                        RowClass="component-row"
                        Filterable="false"
                        Groupable="false"
                        Dense="true"
                        Hover="true"
                        Class="components-grid"
                    >
                        <Columns>
                            <MudBlazor.PropertyColumn Property="@(c => c.Title)" />
                            <MudBlazor.PropertyColumn Property="@(c => c.Years)" />
                            <MudBlazor.TemplateColumn>
                                <CellTemplate>
                                    @if (this.FormModel.Components.Count > 1)
                                    {
                                        <MudMenu
                                            Icon="@Icons.Material.Filled.MoreVert"
                                            Size="Size.Small"
                                            aria-label="@this.Loc["AriaLabel.More"]"
                                        >
                                            @if (this.CanMoveUp(context.Item))
                                            {
                                                <MudMenuItem
                                                    Icon="@Icons.Material.Filled.KeyboardArrowUp"
                                                    @onclick="@(() => this.MoveUp(context.Item))"
                                                >
                                                    @this.Loc["SeriesForm.Component.Up"]
                                                </MudMenuItem>
                                            }

                                            @if (this.CanMoveDown(context.Item))
                                            {
                                                <MudMenuItem
                                                    Icon="@Icons.Material.Filled.KeyboardArrowDown"
                                                @onclick="@(() => this.MoveDown(context.Item))">
                                                    @this.Loc["SeriesForm.Component.Down"]
                                                </MudMenuItem>
                                            }
                                        </MudMenu>
                                    }
                                </CellTemplate>
                            </MudBlazor.TemplateColumn>
                        </Columns>
                    </MudDataGrid>

                    <div class="add-components">
                        <MudButton
                            Color="Color.Default"
                            Variant="Variant.Text"
                            Size="Size.Small"
                            @onclick="@this.AddSeason"
                        >
                            @this.Loc["SeriesForm.AddSeason"]
                        </MudButton>

                        <MudButton
                            Color="Color.Default"
                            Variant="Variant.Text"
                            Size="Size.Small"
                            @onclick="@this.AddSpecialEpisode"
                        >
                            @this.Loc["SeriesForm.AddSpecialEpisode"]
                        </MudButton>
                    </div>

                    <div>
                        <ErrorPresenter ErrorCode="Series.Seasons.*" />
                    </div>

                    <div>
                        <MudTextField
                            @bind-Value="@this.FormModel.ImdbId"
                            Label="@this.Loc["SeriesForm.ImdbId"]"
                            Class="form-field"
                        />

                        <ErrorPresenter ErrorCode="Series.ImdbId.*" Trigger="@this.FormModel.ImdbId" />
                    </div>

                    <div>
                        <MudTextField
                            @bind-Value="@this.FormModel.RottenTomatoesId"
                            Label="@this.Loc["SeriesForm.RottenTomatoesId"]"
                            Class="form-field"
                        />

                        <ErrorPresenter
                            ErrorCode="Series.RottenTomatoesId.*"
                            Trigger="@this.FormModel.RottenTomatoesId"
                        />
                    </div>

                    @if (this.ListItem is not null)
                    {
                        <div class="delete-container">
                            <MudButton
                                Variant="Variant.Filled"
                                Color="Color.Secondary"
                                Disabled="@this.State.Value.Delete.IsInProgress"
                                @onclick="@this.Delete"
                            >
                                @this.Loc[this.State.Value.Delete.IsInProgress ? "Button.Delete.Busy" : "Button.Delete"]
                            </MudButton>
                        </div>
                    }
                </div>

                @if (this.State.Value.Create.Problem is not null)
                {
                    <ApiProblemAlert
                        Problem="@this.State.Value.Create.Problem"
                        Text="SeriesForm.Problem.CreatingFailed"
                        TryAgain="@this.OnSave"
                        Class="problem-alert"
                    />
                }

                @if (this.State.Value.Update.Problem is not null)
                {
                    <ApiProblemAlert
                        Problem="@this.State.Value.Update.Problem"
                        Text="SeriesForm.Problem.UpdatingFailed"
                        TryAgain="@this.OnSave"
                        Class="problem-alert"
                    />
                }

                @if (this.State.Value.Delete.Problem is not null)
                {
                    <ApiProblemAlert
                        Problem="@this.State.Value.Delete.Problem"
                        Text="SeriesForm.Problem.DeletingFailed"
                        TryAgain="this.Delete"
                        Class="problem-alert"
                    />
                }

                <div class="@($"form-actions{(this.FormModel.HasChanges ? "" : " hidden")}")">
                    <MudButton
                        Color="Color.Primary"
                        Variant="Variant.Filled"
                        Disabled="@this.IsSaving"
                        @onclick="@this.OnSave"
                    >
                        @this.Loc[this.IsSaving ? "Button.Save.Busy" : "Button.Save"]
                    </MudButton>

                    <MudButton
                        Color="Color.Surface"
                        Variant="Variant.Filled"
                        Disabled="@this.IsSaving"
                        @onclick="@this.OnCancel"
                    >
                        @this.Loc["Button.Cancel"]
                    </MudButton>
                </div>
            </div>
        }
    </div>
</FormParamsProvider>
