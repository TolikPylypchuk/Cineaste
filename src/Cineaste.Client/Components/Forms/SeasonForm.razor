@inherits CineasteForm<SeasonFormModel, SeasonRequest, SeasonModel, SeriesFormState>

<FormParamsProvider For="this">
    <div class="container list-sidebar">
        <div class="form-header">
            <MudIconButton
                Icon="@Icons.Material.Filled.KeyboardArrowUp"
                Size="Size.Small"
                @onclick="this.GoToSeries"
                aria-label="@this.Loc["AriaLabel.Up"]"
            />

            <div class="go-to-other-components-container">
                <MudIconButton
                    Icon="@Icons.Material.Filled.KeyboardArrowLeft"
                    Size="Size.Small"
                    Class="@(this.FormModel.IsFirst ? "invisible" : null)"
                    @onclick="this.OnGoToPreviousComponent"
                    aria-hidden="@this.FormModel.IsFirst"
                    aria-label="@this.Loc["AriaLabel.Previous"]"
                />

                <MudIconButton
                    Icon="@Icons.Material.Filled.KeyboardArrowRight"
                    Size="Size.Small"
                    Class="@(this.FormModel.IsLast ? "invisible" : null)"
                    @onclick="this.OnGoToNextComponent"
                    aria-hidden="@this.FormModel.IsLast"
                    aria-label="@this.Loc["AriaLabel.Next"]"
                />
            </div>

            <MudIconButton
                Icon="@Icons.Material.Filled.Close"
                Size="Size.Small"
                @onclick="this.Close"
                aria-label="@this.Loc["AriaLabel.Close"]"
            />
        </div>

        <div class="form-container list-sidebar">
            <h2 class="form-title">
                @this.FormTitle
            </h2>

            <div class="form">
                <div class="form-links">
                    @{
                        int part = 1;

                        var periods = this.FormModel.Periods
                            .Where(p => !String.IsNullOrWhiteSpace(p.RottenTomatoesId))
                            .ToList();

                        bool multiple = periods.Count > 1;
                    }

                    @foreach (var period in periods)
                    {
                        string href = String.Format(this.Loc["Link.RottenTomatoesUrlFormat"], period.RottenTomatoesId);

                        <MudLink Href="@href" Target="_blank">
                            @this.RottenTomatoesLinkText(part, multiple)
                        </MudLink>

                        part++;
                    }
                </div>

                <TitlesForm
                    Titles="@this.FormModel.Titles"
                    Label="SeasonForm.Title"
                    PropertyName="@nameof(this.FormModel.Titles)"
                />

                <TitlesForm
                    Titles="@this.FormModel.OriginalTitles"
                    Label="SeasonForm.OriginalTitle"
                    PropertyName="@nameof(this.FormModel.OriginalTitles)"
                />

                <div class="form-statuses">
                    <div>
                        <MudSelect
                            @bind-Value="this.FormModel.WatchStatus"
                            Label="@this.Loc["SeasonForm.WatchStatus"]"
                            Class="select form-field"
                        >
                            @foreach (var status in this.AllWatchStatuses)
                            {
                                <MudSelectItem Value="status">
                                    @this.Loc[$"SeasonForm.WatchStatus.{status}"]
                                </MudSelectItem>
                            }
                        </MudSelect>

                        <ErrorPresenter ErrorCode="Season.WatchStatus.*" Trigger="@this.StatusErrorTrigger" />
                    </div>

                    <div>
                        <MudSelect
                            @bind-Value="this.FormModel.ReleaseStatus"
                                   Label="@this.Loc["SeasonForm.ReleaseStatus"]"
                            Class="select form-field"
                        >
                            @foreach (var status in this.AllReleaseStatuses)
                            {
                                <MudSelectItem Value="status">
                                    @this.Loc[$"SeasonForm.ReleaseStatus.{status}"]
                                </MudSelectItem>
                            }
                        </MudSelect>

                        <ErrorPresenter ErrorCode="Season.ReleaseStatus.*" Trigger="@this.StatusErrorTrigger" />
                    </div>
                </div>

                <div>
                    <MudTextField
                        @bind-Value="@this.FormModel.Channel"
                        Label="@this.Loc["SeasonForm.Channel"]"
                        AutoGrow="true"
                        Class="form-field"
                    />

                    <ErrorPresenter ErrorCode="Season.Channel.*" Trigger="@this.FormModel.Channel" />
                </div>

                @foreach (var period in this.FormModel.Periods)
                {
                    <PeriodForm
                        FormModel="@period"
                        Changed="@this.OnPeriodChanged"
                        CanRemove="@(this.FormModel.Periods.Count > 1)"
                        Removed="@(() => this.OnPeriodRemoved(period))"
                    />
                }

                <div>
                    <ErrorPresenter ErrorCode="Season.Periods.*" Trigger="@this.PeriodValidationTrigger" />
                </div>

                <div class="button-container">
                    <MudButton
                        Color="Color.Surface"
                        Variant="Variant.Filled"
                        @onclick="@this.AddPeriod"
                    >
                        @this.Loc["SeasonForm.AddPeriod"]
                    </MudButton>
                </div>

                <div class="button-container">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="@this.Delete">
                        @this.Loc["Button.Delete"]
                    </MudButton>
                </div>
            </div>

            <div class="form-actions">
                <MudButton
                    Color="Color.Primary"
                    Variant="Variant.Filled"
                    @onclick="@this.GoToSeries"
                >
                    @this.Loc["SeasonForm.GoToSeries"]
                </MudButton>

                @if (this.FormModel.HasChanges)
                {
                    <MudButton
                        Color="Color.Surface"
                        Variant="Variant.Filled"
                        @onclick="@this.Cancel"
                    >
                        @this.Loc["Button.Cancel"]
                    </MudButton>
                }
            </div>
        </div>
    </div>
</FormParamsProvider>
