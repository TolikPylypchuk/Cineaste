// <auto-generated />
using System;
using Cineaste.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cineaste.Persistence.Migrations
{
    [DbContext(typeof(CineasteDbContext))]
    partial class CineasteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cineaste.Core.Domain.CineasteList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Franchise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ContinueNumbering")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FranchiseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLooselyConnected")
                        .HasColumnType("bit");

                    b.Property<string>("KindSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MovieKindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeriesKindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowTitles")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseItemId")
                        .IsUnique()
                        .HasFilter("[FranchiseItemId] IS NOT NULL");

                    b.HasIndex("MovieKindId");

                    b.HasIndex("SeriesKindId");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.FranchiseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DisplayNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("ParentFranchiseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentFranchiseId");

                    b.ToTable("FranchiseItems", t =>
                        {
                            t.HasCheckConstraint("CH_FranchiseItems_SequenceNumberPositive", "SequenceNumber > 0");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.FranchisePoster", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("FranchiseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.ToTable("FranchisePosters", t =>
                        {
                            t.HasCheckConstraint("CH_FranchisePosters_ContentTypeNotEmpty", "ContentType <> ''");

                            t.HasCheckConstraint("CH_FranchisePosters_DataNotEmpty", "DATALENGTH(Data) > 0");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.ListConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultSeasonOriginalTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultSeasonTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ListId")
                        .IsUnique();

                    b.ToTable("ListConfigurations");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.ListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<Guid?>("FranchiseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsShown")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandalone")
                        .HasColumnType("bit");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalizedOriginalTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedShortOriginalTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedShortTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("SeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId")
                        .IsUnique()
                        .HasFilter("[FranchiseId] IS NOT NULL");

                    b.HasIndex("ListId");

                    b.HasIndex("MovieId")
                        .IsUnique()
                        .HasFilter("[MovieId] IS NOT NULL");

                    b.HasIndex("SequenceNumber");

                    b.HasIndex("SeriesId")
                        .IsUnique()
                        .HasFilter("[SeriesId] IS NOT NULL");

                    b.ToTable("ListItems", t =>
                        {
                            t.HasCheckConstraint("CH_ListItems_SequenceNumberNonNegative", "SequenceNumber >= 0");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FranchiseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImdbId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWatched")
                        .HasColumnType("bit");

                    b.Property<Guid>("KindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RottenTomatoesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseItemId")
                        .IsUnique()
                        .HasFilter("[FranchiseItemId] IS NOT NULL");

                    b.HasIndex("KindId");

                    b.ToTable("Movies", t =>
                        {
                            t.HasCheckConstraint("CH_Movies_YearPositive", "Year > 0");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.MovieKind", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NotReleasedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotWatchedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("WatchedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.HasIndex("Name", "ListId")
                        .IsUnique();

                    b.ToTable("MovieKinds", t =>
                        {
                            t.HasCheckConstraint("CH_MovieKinds_NameNotEmpty", "Name <> ''");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.MoviePoster", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MoviePosters", t =>
                        {
                            t.HasCheckConstraint("CH_MoviePosters_ContentTypeNotEmpty", "ContentType <> ''");

                            t.HasCheckConstraint("CH_MoviePosters_DataNotEmpty", "DATALENGTH(Data) > 0");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EndMonth")
                        .HasColumnType("int");

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsSingleDayRelease")
                        .HasColumnType("bit");

                    b.Property<string>("RottenTomatoesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StartMonth")
                        .HasColumnType("int");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Periods", t =>
                        {
                            t.HasCheckConstraint("CH_Periods_EndMonthValid", "StartMonth >= 1 AND StartMonth <= 12");

                            t.HasCheckConstraint("CH_Periods_EndYearPositive", "EndYear > 0");

                            t.HasCheckConstraint("CH_Periods_EpisodeCountPositive", "EndYear > 0");

                            t.HasCheckConstraint("CH_Periods_PeriodValid", "DATEFROMPARTS(StartYear, StartMonth, 1) <= DATEFROMPARTS(EndYear, EndMonth, 1)");

                            t.HasCheckConstraint("CH_Periods_StartMonthValid", "StartMonth >= 1 AND StartMonth <= 12");

                            t.HasCheckConstraint("CH_Periods_StartYearPositive", "StartYear > 0");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleaseStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("SeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WatchStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Seasons", t =>
                        {
                            t.HasCheckConstraint("CH_Seasons_ChannelNotEmpty", "Channel <> ''");

                            t.HasCheckConstraint("CH_Seasons_SequenceNumberPositive", "SequenceNumber > 0");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.SeasonPoster", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("SeasonPosters", t =>
                        {
                            t.HasCheckConstraint("CH_SeasonPosters_ContentTypeNotEmpty", "ContentType <> ''");

                            t.HasCheckConstraint("CH_SeasonPosters_DataNotEmpty", "DATALENGTH(Data) > 0");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Series", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FranchiseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImdbId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("KindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReleaseStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RottenTomatoesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WatchStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseItemId")
                        .IsUnique()
                        .HasFilter("[FranchiseItemId] IS NOT NULL");

                    b.HasIndex("KindId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.SeriesKind", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NotReleasedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotWatchedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("WatchedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.HasIndex("Name", "ListId")
                        .IsUnique();

                    b.ToTable("SeriesKinds", t =>
                        {
                            t.HasCheckConstraint("CH_SeriesKinds_NameNotEmpty", "Name <> ''");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.SeriesPoster", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("SeriesPosters", t =>
                        {
                            t.HasCheckConstraint("CH_SeriesPosters_ContentTypeNotEmpty", "ContentType <> ''");

                            t.HasCheckConstraint("CH_SeriesPosters_DataNotEmpty", "DATALENGTH(Data) > 0");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.SpecialEpisode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWatched")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("RottenTomatoesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("SeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("SpecialEpisodes", t =>
                        {
                            t.HasCheckConstraint("CH_SpecialEpisodes_ChannelNotEmpty", "Channel <> ''");

                            t.HasCheckConstraint("CH_SpecialEpisodes_MonthValid", "Month >= 1 AND Month <= 12");

                            t.HasCheckConstraint("CH_SpecialEpisodes_SequenceNumberPositive", "SequenceNumber > 0");

                            t.HasCheckConstraint("CH_SpecialEpisodes_YearPositive", "Year > 0");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.SpecialEpisodePoster", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("SpecialEpisodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpecialEpisodeId");

                    b.ToTable("SpecialEpisodePosters", t =>
                        {
                            t.HasCheckConstraint("CH_SpecialEpisodePosters_ContentTypeNotEmpty", "ContentType <> ''");

                            t.HasCheckConstraint("CH_SpecialEpisodePosters_DataNotEmpty", "DATALENGTH(Data) > 0");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApplicableToMovies")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApplicableToSeries")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.HasIndex("Name", "Category")
                        .IsUnique();

                    b.ToTable("Tags", t =>
                        {
                            t.HasCheckConstraint("CH_Tag_CategoryNotEmpty", "Category <> ''");

                            t.HasCheckConstraint("CH_Tag_NameNotEmpty", "Name <> ''");
                        });
                });

            modelBuilder.Entity("Cineaste.Core.Domain.TagImplication", b =>
                {
                    b.Property<Guid>("ImpliedTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImplyingTagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImpliedTagId", "ImplyingTagId");

                    b.HasIndex("ImplyingTagId");

                    b.ToTable("TagImplications", (string)null);
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Franchise", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.FranchiseItem", "FranchiseItem")
                        .WithOne("Franchise")
                        .HasForeignKey("Cineaste.Core.Domain.Franchise", "FranchiseItemId");

                    b.HasOne("Cineaste.Core.Domain.MovieKind", "MovieKind")
                        .WithMany()
                        .HasForeignKey("MovieKindId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cineaste.Core.Domain.SeriesKind", "SeriesKind")
                        .WithMany()
                        .HasForeignKey("SeriesKindId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("Cineaste.Core.Domain.Title", "AllTitles", b1 =>
                        {
                            b1.Property<Guid>("FranchiseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("IsOriginal")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SequenceNumber")
                                .HasColumnType("int");

                            b1.HasKey("FranchiseId", "Id");

                            b1.ToTable("FranchiseTitles", null, t =>
                                {
                                    t.HasCheckConstraint("CH_FranchiseTitles_NameNotEmpty", "Name <> ''");

                                    t.HasCheckConstraint("CH_FranchiseTitles_SequenceNumberPositive", "SequenceNumber > 0");
                                });

                            b1.WithOwner()
                                .HasForeignKey("FranchiseId");
                        });

                    b.Navigation("AllTitles");

                    b.Navigation("FranchiseItem");

                    b.Navigation("MovieKind");

                    b.Navigation("SeriesKind");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.FranchiseItem", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.Franchise", "ParentFranchise")
                        .WithMany("Children")
                        .HasForeignKey("ParentFranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentFranchise");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.FranchisePoster", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.Franchise", "Franchise")
                        .WithMany()
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.ListConfiguration", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.CineasteList", null)
                        .WithOne("Configuration")
                        .HasForeignKey("Cineaste.Core.Domain.ListConfiguration", "ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Cineaste.Core.Domain.ListSortingConfiguration", "SortingConfiguration", b1 =>
                        {
                            b1.Property<Guid>("ListConfigurationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstSortOrder")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstSortOrder");

                            b1.Property<string>("SecondSortOrder")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SecondSortOrder");

                            b1.Property<string>("SortDirection")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SortDirection");

                            b1.HasKey("ListConfigurationId");

                            b1.ToTable("ListConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ListConfigurationId");
                        });

                    b.Navigation("SortingConfiguration")
                        .IsRequired();
                });

            modelBuilder.Entity("Cineaste.Core.Domain.ListItem", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.Franchise", "Franchise")
                        .WithOne("ListItem")
                        .HasForeignKey("Cineaste.Core.Domain.ListItem", "FranchiseId");

                    b.HasOne("Cineaste.Core.Domain.CineasteList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cineaste.Core.Domain.Movie", "Movie")
                        .WithOne("ListItem")
                        .HasForeignKey("Cineaste.Core.Domain.ListItem", "MovieId");

                    b.HasOne("Cineaste.Core.Domain.Series", "Series")
                        .WithOne("ListItem")
                        .HasForeignKey("Cineaste.Core.Domain.ListItem", "SeriesId");

                    b.Navigation("Franchise");

                    b.Navigation("List");

                    b.Navigation("Movie");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Movie", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.FranchiseItem", "FranchiseItem")
                        .WithOne("Movie")
                        .HasForeignKey("Cineaste.Core.Domain.Movie", "FranchiseItemId");

                    b.HasOne("Cineaste.Core.Domain.MovieKind", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("Cineaste.Core.Domain.Title", "AllTitles", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("IsOriginal")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SequenceNumber")
                                .HasColumnType("int");

                            b1.HasKey("MovieId", "Id");

                            b1.ToTable("MovieTitles", null, t =>
                                {
                                    t.HasCheckConstraint("CH_MovieTitles_NameNotEmpty", "Name <> ''");

                                    t.HasCheckConstraint("CH_MovieTitles_SequenceNumberPositive", "SequenceNumber > 0");
                                });

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsMany("Cineaste.Core.Domain.TagContainer", "Tags", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("TagId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("MovieId", "Id");

                            b1.HasIndex("TagId");

                            b1.ToTable("MovieTags", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId");

                            b1.HasOne("Cineaste.Core.Domain.Tag", "Tag")
                                .WithMany()
                                .HasForeignKey("TagId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Tag");
                        });

                    b.Navigation("AllTitles");

                    b.Navigation("FranchiseItem");

                    b.Navigation("Kind");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.MovieKind", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.CineasteList", null)
                        .WithMany("MovieKinds")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cineaste.Core.Domain.MoviePoster", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Period", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.Season", null)
                        .WithMany("Periods")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Season", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.Series", null)
                        .WithMany("Seasons")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Cineaste.Core.Domain.Title", "AllTitles", b1 =>
                        {
                            b1.Property<Guid>("SeasonId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("IsOriginal")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SequenceNumber")
                                .HasColumnType("int");

                            b1.HasKey("SeasonId", "Id");

                            b1.ToTable("SeasonTitles", null, t =>
                                {
                                    t.HasCheckConstraint("CH_SeasonTitles_NameNotEmpty", "Name <> ''");

                                    t.HasCheckConstraint("CH_SeasonTitles_SequenceNumberPositive", "SequenceNumber > 0");
                                });

                            b1.WithOwner()
                                .HasForeignKey("SeasonId");
                        });

                    b.Navigation("AllTitles");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.SeasonPoster", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Series", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.FranchiseItem", "FranchiseItem")
                        .WithOne("Series")
                        .HasForeignKey("Cineaste.Core.Domain.Series", "FranchiseItemId");

                    b.HasOne("Cineaste.Core.Domain.SeriesKind", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("Cineaste.Core.Domain.Title", "AllTitles", b1 =>
                        {
                            b1.Property<Guid>("SeriesId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("IsOriginal")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SequenceNumber")
                                .HasColumnType("int");

                            b1.HasKey("SeriesId", "Id");

                            b1.ToTable("SeriesTitles", null, t =>
                                {
                                    t.HasCheckConstraint("CH_SeriesTitles_NameNotEmpty", "Name <> ''");

                                    t.HasCheckConstraint("CH_SeriesTitles_SequenceNumberPositive", "SequenceNumber > 0");
                                });

                            b1.WithOwner()
                                .HasForeignKey("SeriesId");
                        });

                    b.OwnsMany("Cineaste.Core.Domain.TagContainer", "Tags", b1 =>
                        {
                            b1.Property<Guid>("SeriesId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("TagId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("SeriesId", "Id");

                            b1.HasIndex("TagId");

                            b1.ToTable("SeriesTags", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SeriesId");

                            b1.HasOne("Cineaste.Core.Domain.Tag", "Tag")
                                .WithMany()
                                .HasForeignKey("TagId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Tag");
                        });

                    b.Navigation("AllTitles");

                    b.Navigation("FranchiseItem");

                    b.Navigation("Kind");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.SeriesKind", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.CineasteList", null)
                        .WithMany("SeriesKinds")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cineaste.Core.Domain.SeriesPoster", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.SpecialEpisode", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.Series", null)
                        .WithMany("SpecialEpisodes")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Cineaste.Core.Domain.Title", "AllTitles", b1 =>
                        {
                            b1.Property<Guid>("SpecialEpisodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("IsOriginal")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SequenceNumber")
                                .HasColumnType("int");

                            b1.HasKey("SpecialEpisodeId", "Id");

                            b1.ToTable("SpecialEpisodeTitles", null, t =>
                                {
                                    t.HasCheckConstraint("CH_SpecialEpisodeTitles_NameNotEmpty", "Name <> ''");

                                    t.HasCheckConstraint("CH_SpecialEpisodeTitles_SequenceNumberPositive", "SequenceNumber > 0");
                                });

                            b1.WithOwner()
                                .HasForeignKey("SpecialEpisodeId");
                        });

                    b.Navigation("AllTitles");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.SpecialEpisodePoster", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.SpecialEpisode", "SpecialEpisode")
                        .WithMany()
                        .HasForeignKey("SpecialEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecialEpisode");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Tag", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.CineasteList", null)
                        .WithMany("Tags")
                        .HasForeignKey("ListId");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.TagImplication", b =>
                {
                    b.HasOne("Cineaste.Core.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("ImpliedTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cineaste.Core.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("ImplyingTagId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cineaste.Core.Domain.CineasteList", b =>
                {
                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("MovieKinds");

                    b.Navigation("SeriesKinds");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Franchise", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ListItem");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.FranchiseItem", b =>
                {
                    b.Navigation("Franchise");

                    b.Navigation("Movie");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Movie", b =>
                {
                    b.Navigation("ListItem");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Season", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("Cineaste.Core.Domain.Series", b =>
                {
                    b.Navigation("ListItem");

                    b.Navigation("Seasons");

                    b.Navigation("SpecialEpisodes");
                });
#pragma warning restore 612, 618
        }
    }
}
