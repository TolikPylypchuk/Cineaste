@page "/login"

@inject UserManager<CineasteUser> UserManager
@inject SignInManager<CineasteUser> SignInManager
@inject IStringLocalizer<Resources> Loc
@inject IPageNavigator PageNavigator

<PageTitle>@this.Loc["LoginPage.PageTitle"]</PageTitle>

<div class="container">
    <h1 class="title">@this.Loc["LoginPage.Title"]</h1>

    @if (!String.IsNullOrEmpty(this.errorMessage))
    {
        <MudAlert Severity="Severity.Error" NoIcon="true">@this.errorMessage</MudAlert>
    }

    <EditForm
        FormName="login"
        Model="this.Model"
        OnValidSubmit="this.OnLogin"
        id="login-form"
        method="post"
        class="login-form"
    >
        <MudStaticTextField
            For="@(() => this.Model.Email)"
            @bind-Value="this.Model.Email"
            Label="@this.Loc["LoginPage.Email"]"
            InputType="InputType.Email"
            Required="true"
            autocomplete="username"
        />

        <MudStaticTextField
            For="@(() => this.Model.Password)"
            @bind-Value="this.Model.Password"
            Label="@this.Loc["LoginPage.Password"]"
            InputType="InputType.Password"
            Required="true"
            Adornment="Adornment.End"
            AdornmentIcon="@Icons.Material.Filled.Visibility"
            AdornmentClickFunction="showPassword"
            AdornmentAriaLabel="@this.Loc["LoginPage.ShowPassword"]"
            autocomplete="current-password"
        />

        <MudStaticCheckBox
            For="@(() => this.Model.RememberUser)"
            @bind-Value="this.Model.RememberUser"
            Color="Color.Primary"
        >
            @this.Loc["LoginPage.RememberMe"]
        </MudStaticCheckBox>

        <div class="actions">
            <MudStaticButton
                Color="Color.Primary"
                Variant="Variant.Filled"
                FormAction="FormAction.Submit"
            >
                @this.Loc["LoginPage.LogIn"]
            </MudStaticButton>

            <MudButton
                Href="@this.PageNavigator.GetPageUrl(CineastePage.Landing)"
                Color="Color.Surface"
                Variant="Variant.Text"
            >
                @this.Loc["LoginPage.BackToLandingPage"]
            </MudButton>
        </div>

        <div class="register-container">
            <p>@this.Loc["LoginPage.NoAccount"]</p>
            <MudButton
                Href="@this.PageNavigator.GetPageUrlWithReturnUrl(CineastePage.Register, this.ReturnUrl)"
                Color="Color.Secondary"
                Variant="Variant.Text"
            >
                @this.Loc["LoginPage.Register"]
            </MudButton>
        </div>
    </EditForm>
</div>

<template id="password-icon-show-password">
    <MudIcon Icon="@Icons.Material.Filled.Visibility" aria-label="@this.Loc["LoginPage.ShowPassword"]" />
</template>

<template id="password-icon-hide-password">
    <MudIcon Icon="@Icons.Material.Filled.VisibilityOff" aria-label="@this.Loc["LoginPage.HidePassword"]" />
</template>

<script src=@this.Assets["js/showPassword.js"]></script>

@code {
    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    [SupplyParameterFromForm]
    private LoginModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(this.HttpContext.Request.Method))
        {
            await this.HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private async Task OnLogin()
    {
        if (String.IsNullOrWhiteSpace(this.Model.Email))
        {
            this.SetErrorMessage("EmailRequired");
            return;
        }

        if (String.IsNullOrWhiteSpace(this.Model.Password))
        {
            this.SetErrorMessage("PasswordRequired");
            return;
        }

        var user = await this.UserManager.Users
            .Include(user => user.List)
            .FirstOrDefaultAsync(user => user.Email == this.Model.Email);

        if (user == null)
        {
            this.SetErrorMessage();
            return;
        }

        var attempt = await this.SignInManager.CheckPasswordSignInAsync(
            user, this.Model.Password, lockoutOnFailure: false);

        if (!attempt.Succeeded)
        {
            this.SetErrorMessage();
            return;
        }

        await this.SignInManager.SignInWithClaimsAsync(
            user, this.Model.RememberUser, [new Claim(CineasteClaims.ListId, user.List.Id.ToString())]);

        this.PageNavigator.GoToPage(this.ReturnUrl);
    }

    private void SetErrorMessage(string message = "InvalidLoginAttempt") =>
        this.errorMessage = this.Loc[$"LoginPage.{message}"];

    private sealed class LoginModel
    {
        public string Email { get; set; } = String.Empty;
        public string Password { get; set; } = String.Empty;
        public bool RememberUser { get; set; } = false;
    }
}
